# Features covered: Pull parser
#
# This file contains a collection of tests for the pull parser
# interface.
# Tested functionalities:
#    pp-1.*: Basics, interface
#    pp-2.*: Compare dom / pull parsing
#    pp-3.*: skip method
#    pp-4.*: find-element method
#
# Copyright (c) 2017 Rolf Ade.

source [file join [file dir [info script]] loadtdom.tcl]

test pp-1.1 {Create} {
    tDOM::pullparser pp
    pp delete
} {}

test pp-1.2 {Invalid create} {
    catch {tDOM::pullparser pp foo}
} 1

test pp-1.3 {Reset freshly created parser} {
    tDOM::pullparser pp
    pp reset
    pp reset
    pp delete
} {}

test pp-1.4 {State after creation} {
    tDOM::pullparser pp
    set result [pp state]
    lappend result [pp state]
    pp delete
    set result
} {READY READY}

proc walkDOM {node} {
    set str ""
    switch [$node nodeType] {
        "ELEMENT_NODE" {
            append str [$node nodeName]
            # Because the dom builder arranges attributes so that the
            # xmlns attributes come first we need to ensure a unify
            # attribute order for comparsion.
            set attpairs [list]
            foreach att [$node attributes] {
                if {[llength $att] == 3} {
                    if {[lindex $att 2] eq ""} {
                        lappend attpairs [list \
                            xmlns:[lindex $att 0] \
                            [$node getAttribute xmlns:[lindex $att 0]]]
                    } else {
                        lappend attpairs [list \
                            [lindex $att 1]:[lindex $att 0] \
                            [$node getAttribute [lindex $att 1]:[lindex $att 0]]]
                    }
                } else {
                    lappend attpairs [list $att [$node getAttribute $att]]
                }
            }
            foreach {name value} [lsort -index 0 $attpairs] {
                append str $name $value
            }
            foreach child [$node childNodes] {
                append str [walkDOM $child]
            }
            append str /[$node nodeName]
        }
        "TEXT_NODE" {
            append str [$node nodeValue]
        }
        default {
            # Ignore anything else
        }
    }
    return $str
}

proc loopPull {} {
    while {[set state [pp next]] ne "END_DOCUMENT"} {
        switch $state {
            "START_TAG" {
                append pullstr [pp tag]
                set attpairs [list]
                foreach {attname attvalue} [pp attributes] {
                    lappend attpairs [list $attname $attvalue]
                }
                foreach {name value} [lsort -index 0 $attpairs] {
                    append pullstr $name $value
                }
            }
            "TEXT" {
                append pullstr [pp text]
            }
            "END_TAG" {
                append pullstr /[pp tag]
            }
        }
    }
    return $pullstr
}

proc compareWith {data {inputMethod input}} {
    if {$inputMethod eq "input"} {
        dom parse $data doc
    } elseif {$inputMethod eq "inputchannel"} {
        dom parse -channel $data doc
    } else {
        dom parse [::tDOM::xmlReadFile $data] doc
    }
    set domstr [walkDOM [$doc documentElement]]
    $doc delete
    tDOM::pullparser pp -ignorewhitecdata
    pp $inputMethod $data
    set pullstr [loopPull]
    if {$domstr eq $pullstr} {
        return 1
    } else {
        puts $domstr
        puts $pullstr
        return 0
    }
}

test pp-2.1 {dom/pull comparsion: mondial-europe.xml} {
    compareWith ../tests/data/mondial-europe.xml inputfile
} 1

test pp-2.2 {dom/pull comparsion: books.xml} {
    compareWith ../tests/data/books.xml inputfile
} 1

test pp-2.3 {dom/pull comparsion: i18n_1.xml} {
    compareWith ../tests/data/i18n_1.xml inputfile
} 1

test pp-2.4 {dom/pull comparsion: i18n_2.xml} {
    compareWith ../tests/data/i18n_1.xml inputfile
} 1

test pp-2.5 {dom/pull comparsion: REC-xslt-19991116.xml} {
    compareWith ../tests/data/REC-xslt-19991116.xml inputfile
} 1

test pp-2.6 {dom/pull comparsion: xslt_1.xsl} {
    compareWith ../tests/data/xslt_1.xsl inputfile
} 1

test pp-2.7 {dom/pull comparsion} {
    compareWith {<p>This specification defines the syntax and semantics of XSLT, which
is a language for transforming XML documents into other XML
        documents.</p>}
} 1

test pp-2.8 {dom/pull comparsion} {
    compareWith {<p><termdef> (see <specref/>), which is
referred to in </termdef></p>}
} 1

test pp-2.9 {dom/pull comparsion} {
    compareWith {<p>This specification defines the syntax and semantics of the XSLT
language.  A transformation in the XSLT language is expressed as a
well-formed XML document <bibref/>conforming </p>}
} 1

test pp-3.1 {skip} {
    tDOM::pullparser pp
    pp input <doc/>
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp skip]
    lappend result [pp tag]
    lappend result [pp next]
    pp delete
    set result
} {START_TAG doc END_TAG doc END_DOCUMENT}

test pp-3.1.1 {skip} {
    tDOM::pullparser pp
    pp input {<doc><e/></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp skip]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    pp delete
    set result
} {START_TAG doc START_TAG e END_TAG e END_TAG doc END_DOCUMENT}

test pp-3.1.2 {skip} {
    tDOM::pullparser pp
    pp input {<doc>text<e/>text</doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp text]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp skip]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp text]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    pp delete
    set result
} {START_TAG doc TEXT text START_TAG e END_TAG e TEXT text END_TAG doc END_DOCUMENT}

test pp-3.1.3 {skip} {
    tDOM::pullparser pp
    pp input {<doc>text<e>bar<b><c/><c>baz</c></b><b>text</b></e>text</doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp text]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp skip]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp text]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    pp delete
    set result
} {START_TAG doc TEXT text START_TAG e END_TAG e TEXT text END_TAG doc END_DOCUMENT}

test pp-3.2 {skip} {
    tDOM::pullparser pp
    pp input {<doc><e/></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp skip]
    lappend result [pp tag]
    lappend result [pp next]
    pp delete
    set result
} {START_TAG doc END_TAG doc END_DOCUMENT}

test pp-3.3 {skip} {
    tDOM::pullparser pp
    pp input {<doc>foo bar<e/></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp skip]
    lappend result [pp tag]
    lappend result [pp next]
    pp delete
    set result
} {START_TAG doc END_TAG doc END_DOCUMENT}

test pp-3.4 {skip} {
    tDOM::pullparser pp
    pp input {<doc>foo bar<e/><e>bar<e/></e><e></e></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp skip]
    lappend result [pp tag]
    lappend result [pp next]
    pp delete
    set result
} {START_TAG doc END_TAG doc END_DOCUMENT}

test pp-3.5 {skip} {
    tDOM::pullparser pp
    pp input {<doc>foo bar<e/><e>bar<e/></e><e></e></doc>}
    set result [list]
    while {[set state [pp next]] ne "END_DOCUMENT"} {
        lappend result $state
        if {$state eq "START_TAG"} {
            lappend result [pp tag]
            if {[pp tag] eq "e"} {
                pp skip
                continue
            }
        }
        if {[pp state] eq "END_TAG"} {
            lappend result [pp tag]
        }
    }
    pp delete
    set result
} {START_TAG doc TEXT START_TAG e START_TAG e START_TAG e END_TAG doc}

test pp-3.6 {skip} {
    tDOM::pullparser pp
    pp input {<doc>foo bar<e/><e>bar<e/></e><e></e>baz</doc>}
    set result [list]
    while {[set state [pp next]] ne "END_DOCUMENT"} {
        lappend result $state
        if {$state eq "START_TAG"} {
            lappend result [pp tag]
            if {[pp tag] eq "e"} {
                pp skip
                continue
            }
        }
        if {[pp state] eq "END_TAG"} {
            lappend result [pp tag]
        }
        if {[pp state] eq "TEXT"} {
            lappend result [pp text]
        }
    }
    pp delete
    set result
} {START_TAG doc TEXT {foo bar} START_TAG e START_TAG e START_TAG e TEXT baz END_TAG doc}

test pp-3.7 {skip} {
    tDOM::pullparser pp
    pp input {<doc>foo bar<e/><e>bar</wrong><e></e></doc>}
    set result [pp next]
    lappend result [pp next]; # TEXT "foo bar"
    lappend result [pp next]; # START_TAG
    lappend result [pp tag];  # e
    lappend result [pp next]; # END_TAG
    lappend result [pp tag];  # e
    lappend result [pp next]; # START_TAG
    lappend result [pp tag];  # e
    lappend result [catch {pp skip} errMsg]
    lappend result $errMsg
    pp delete
    set result
} {START_TAG TEXT START_TAG e END_TAG e START_TAG e 1 {error "mismatched tag" at line 1 character 24}}

test pp-4.1 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a>foo bar</a><b>baz</b><c>grill</c><d>here</d></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element d]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp text]
    lappend result [pp next]
    lappend result [pp tag]    
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG a START_TAG d TEXT here END_TAG d}

test pp-4.2 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a>foo bar</a><b>baz</b><c>grill</c><d></d></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element d]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]    
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG a START_TAG d END_TAG d}

test pp-4.3 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a>foo bar</a><b>baz</b><c>grill</c>some<d/></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element d]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]    
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG a START_TAG d END_TAG d}

test pp-4.4 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a><b><c><d>grill</d></c></b></a></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element d]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp text]
    lappend result [pp next]
    lappend result [pp tag]    
    lappend result [pp next]
    lappend result [pp tag]    
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG d TEXT grill END_TAG d END_TAG c}

test pp-4.5 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a><b><c><d></d></c></b></a></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element d]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]    
    lappend result [pp next]
    lappend result [pp tag]    
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG d END_TAG d END_TAG c}

test pp-4.6 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a><b><c><d/></c></b></a></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element d]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]    
    lappend result [pp next]
    lappend result [pp tag]    
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG d END_TAG d END_TAG c}


test pp-4.7 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a><b/></a><a><b><c/></b></a><a><b/></a></doc>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element b]
    lappend result [pp tag]
    lappend result [pp find-element c]
    lappend result [pp tag]
    lappend result [pp find-element a]
    lappend result [pp tag]
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG b START_TAG c START_TAG a}

test pp-4.8 {find-element} {
    tDOM::pullparser pp
    pp input {<doc/>}
    set result [pp next]
    lappend result [pp tag]
    lappend result [pp next]
    lappend result [pp tag]
    lappend result [pp find-element b]
    pp delete
    set result
} {START_TAG doc END_TAG doc END_DOCUMENT}

test pp-4.9 {find-element} {
    tDOM::pullparser pp
    pp input {<doc><a><b/></a><a><b><c/></b></a><a><b/></a></doc>}
    set result [pp next]; # START_TAG
    lappend result [pp tag]; # doc
    lappend result [pp next]; # START_TAG
    lappend result [pp tag]; # a
    lappend result [pp find-element b]; # START_TAG
    lappend result [pp tag]; #b 
    lappend result [pp find-element c]; # START_TAG
    lappend result [pp tag]; #c
    lappend result [pp next]; # END_TAG
    lappend result [pp tag]; # c
    lappend result [pp find-element a]; # START_TAG
    lappend result [pp tag]; # a
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG a START_TAG b START_TAG c END_TAG c START_TAG a}

test pp-4.10 {find-element} {
    tDOM::pullparser pp
    pp input {<doc>foo<a/>bar<b>grill<a/>baz</b></doc>}
    set result [pp next]; # START_TAG
    lappend result [pp tag]; # doc
    lappend result [pp find-element a]; # START_TAG
    lappend result [pp tag]; # a
    lappend result [pp next]; # END_TAG
    lappend result [pp tag]; # a
    lappend result [pp find-element a]; # START_TAG
    lappend result [pp tag]; #a 
    lappend result [pp next]; # END_TAG
    lappend result [pp tag]; # a 
    lappend result [pp next]; # TEXT 
    lappend result [pp text]; # baz 
    lappend result [pp next]; # END_TAG 
    lappend result [pp tag]; # b
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_TAG doc START_TAG a END_TAG a START_TAG a END_TAG a TEXT baz END_TAG b}

test pp-4.11 {find-element} {
    tDOM::pullparser pp
    pp input {<doc>foo<a/>bar<b>grill<a/>baz</b></doc>}
    set result [pp state]
    lappend result [pp find-element a]; # START_TAG
    lappend result [pp tag]; # a
    lappend result [pp next]; # END_TAG
    lappend result [pp tag]; # a
    lappend result [pp find-element a]; # START_TAG
    lappend result [pp tag]; #a 
    lappend result [pp next]; # END_TAG
    lappend result [pp tag]; # a 
    lappend result [pp next]; # TEXT 
    lappend result [pp text]; # baz 
    lappend result [pp next]; # END_TAG 
    lappend result [pp tag]; # b
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_DOCUMENT START_TAG a END_TAG a START_TAG a END_TAG a TEXT baz END_TAG b}

test pp-4.12 {find-element} {
    tDOM::pullparser pp
    pp input {<doc>foo<a/>bar<b>grill<a/>baz</b></doc>}
    set result [pp state]
    pp find-element a
    lappend result [pp find-element a]; # START_TAG
    lappend result [pp tag]; #a 
    lappend result [pp next]; # END_TAG
    lappend result [pp tag]; # a 
    lappend result [pp next]; # TEXT 
    lappend result [pp text]; # baz 
    lappend result [pp next]; # END_TAG 
    lappend result [pp tag]; # b
    while {[pp next] ne "END_DOCUMENT"} {}
    pp delete
    set result
} {START_DOCUMENT START_TAG a END_TAG a TEXT baz END_TAG b}

test pp-4.13 {find-element} {
    tDOM::pullparser pp
    pp input {<doc/>}
    set result [pp state]
    lappend result [pp find-element a]
    pp delete
    set result
} {START_DOCUMENT END_DOCUMENT}    
