# Features covered: Structure validation
#
# Tested functionalities:
#    structure-1.*: Basics, interface
#
# Copyright (c) 2018 Rolf Ade.

source [file join [file dir [info script]] loadtdom.tcl]

test structure-1.1 {create} {
    tdom::structure create grammar
    grammar start doc
    grammar delete
} {}

test structure-1.2 {grammar cmd outside context} {
    catch {tdom::structure::element}
} {1}

test structure-1.3 {grammar cmd} {
    tdom::structure create grammar
    grammar pattern somePattern {
        element foo !
    }
    grammar delete
} {}

test structure-1.4 {grammar cmd} {
    tdom::structure create grammar
    grammar pattern somePattern {
        for {set i 0} {$i < 100} {incr i} {
            element foo$i !
        }
    }
    grammar delete
} {}

test structure-1.5 {grammar cmd} {
    tdom::structure create grammar
    grammar element doc {
        element elm1
        element elm2 *
    }
    grammar element elm1 empty
    grammar element elm2 empty
    grammar delete
} {}

test structure-1.6 {quants} {
    tdom::structure create grammar
    grammar element doc {
        element elm1
        element elm2 *
        element elm3 !
        element elm4 +
        element elm5 ?
        element elm6 1
        element elm7 5
        element elm8 12
        element elm9 {0 3}
        element elm9 {1 12}
        element elm10 "8 "
    }
    grammar delete
} {}

test structure-1.7 {quants} {
    tdom::structure create grammar
    grammar element doc {
        for {set i 0} {$i < 100} {incr i} {
            element elm$i [list $i [expr {$i + 1}]]
        }
    }
    grammar delete
} {}

test structure-1.8 {Same element name in different Namespaces} {
    tdom::structure create grammar
    grammar element doc {
        element elm1
        element elm2
    }
    grammar element doc ns1 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar element doc ns2 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar element elm1 ns2 empty
    grammar element elm2 ns2 any
    set result [catch {
        grammar element elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar element elm1 ns1 any
    grammar element elm2 ns1 empty
    grammar delete
    set result
} 1

test structure-1.9 {Same element name in different Namespaces} {
    tdom::structure create grammar
    set result [catch {
        grammar element doc {
            element elm1
            element elm2
        }
        grammar element doc ns1 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar element doc ns2 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar element elm1 ns2 empty
        grammar element elm2 ns2 any
        grammar element elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar delete
    set result
} 1

test structure-1.10 {Local element definition} {
    tdom::structure create grammar
    grammar element doc {
        element elm1
        element elm1 1 {
            element a
            element b
        }
    }
    grammar element c text
    grammar element d text
    grammar element elm1 {
        element c
        element d
    }
    grammar delete
} {}

test structure-2.1 {grammar definition: ref} {
    tdom::structure create grammar
    grammar pattern thisPattern {
        element a
        element b
    }
    grammar pattern thatPattern {
        element c
        element d
    }
    grammar element doc {
        ref thisPattern
        ref thatPattern ?
    }
    grammar delete
} {}

test structure-2.2 {grammar definition: ref} {
    tdom::structure create grammar
    set result [grammar nrForwardDefinitions]
    grammar element doc {
        ref thisPattern
        ref thatPattern ?
    }
    lappend result [grammar nrForwardDefinitions]
    grammar delete
    set result
} {0 2}

test structure-3.1 {grammar definition: choice} {
    tdom::structure create grammar
    grammar element doc {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

test structure-3.2 {grammar definition: choice} {
    tdom::structure create grammar
    grammar pattern thisPattern {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

proc pullValidate {g xml} {
    tdom::pullparser pp
    pp input $xml
    while {[pp next] ne "END_DOCUMENT"} {
        switch [pp state] {
            "START_TAG" {
                $g event start [pp tag]
            }
            "END_TAG" {
                $g event end
            }
            "TEXT" {
                $g event text [pp text]
            }
        }
    }
}

test structure-4.1 {validation} {
    tdom::structure create grammar
    grammar element doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar element $e {}
    }
    pullValidate grammar {
        <doc><e1/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test structure-5.1 {dom parse -validateCmd} {
    set result [catch {
        [dom parse -validateCmd tdom::structure <doc/>]
    }]
} 1

test structure-5.2 {dom parse -validateCmd} {
    tdom::structure create grammar
    grammar element doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar element $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar reset
    dom parse -validateCmd grammar {
        <doc><e1/><e2/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar reset
    dom parse -validateCmd grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar delete
} {}

proc structure-5.3 {base systemId publicId} {
    return [list "string" "" "<foo/>"]
}

test structure-5.3 {dom parse -validateCmd} {
    tdom::structure create grammar
    grammar element doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar element $e {}
    }
    set result [catch {dom parse -validateCmd grammar \
                           -externalentitycommand structure-5.3 {
                               <!DOCTYPE doc [
                                              <!ENTITY e1 PUBLIC "e1" "e1.xml">
                                             ]>
                                   <doc>&e1;</doc>} doc} errMsg]
    grammar delete
    set result
} 1

test structure-6.1 {expat parser with -validateCmd} {
    tdom::structure create grammar
    grammar element doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar element $e {}
    }
    ::xml::parser p -validateCmd grammar
    set result [catch {p parse {<doc><e2/></doc>}} errMsg]
    p delete
    grammar delete
    set result
} 1

test structure-7.1 {group} {
    tdom::structure create grammar
    grammar element doc {
        element e1
        group ! {
            element e1
            element e2
        }
        group ! {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar element $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test structure-7.2 {group} {
    tdom::structure create grammar
    grammar element doc {
        element e1
        group 2 {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar element $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}
