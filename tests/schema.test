# Features covered: Schema validation
#
# Tested functionalities:
#    schema-1.*: Basics, interface
#    schema-2.*: Grammar definition ref
#    schema-3.*: Grammar definition choice
#    schema-4.*: Script level validation with event
#    schema-5.*: dom parse -validateCmd
#    schema-6.*: expat parser -validateCmd
#    schema-7.*: Validation checks.
#    schema-8.*: tdom::schema validate method
#    schema-9.*: Choice
#    scheam-10.*: Any
#    schema-11.*: attribute, nsattribute
#    schema-12.*: schemaCmd domvalidate
#    schema-13.*: XML namespaces
#    schema-14.*: text
#
# Copyright (c) 2018 Rolf Ade.

source [file join [file dir [info script]] loadtdom.tcl]

if {[dom featureinfo schema]} {

test schema-1.1 {create} {
    tdom::schema create grammar
    grammar start doc
    grammar delete
} {}

test schema-1.2 {grammar cmd outside context} {
    catch {tdom::schema::element}
} {1}

test schema-1.3 {grammar cmd} {
    tdom::schema create grammar
    grammar defpattern somePattern {
        element foo !
    }
    grammar delete
} {}

test schema-1.4 {grammar cmd} {
    tdom::schema create grammar
    grammar defpattern somePattern {
        for {set i 0} {$i < 100} {incr i} {
            element foo$i !
        }
    }
    grammar delete
} {}

test schema-1.5 {grammar cmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2 *
    }
    grammar defelement elm1 {}
    grammar defelement elm2 {}
    grammar delete
} {}

test schema-1.6 {quants} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2 *
        element elm3 !
        element elm4 +
        element elm5 ?
        element elm6 1
        element elm7 5
        element elm8 12
        element elm9 {0 3}
        element elm9 {1 12}
        element elm10 "8 "
    }
    grammar delete
} {}

test schema-1.7 {quants} {
    tdom::schema create grammar
    grammar defelement doc {
        for {set i 0} {$i < 100} {incr i} {
            element elm$i [list $i [expr {$i + 1}]]
        }
    }
    grammar delete
} {}

test schema-1.8 {Same element name in different Namespaces} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2
    }
    grammar defelement doc ns1 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar defelement doc ns2 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar defelement elm1 ns2 {}
    grammar defelement elm2 ns2 any
    set result [catch {
        grammar defelement elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar defelement elm1 ns1 any
    grammar defelement elm2 ns1 {}
    grammar delete
    set result
} 1

test schema-1.9 {Same element name in different Namespaces} {
    tdom::schema create grammar
    set result [catch {
        grammar defelement doc {
            element elm1
            element elm2
        }
        grammar defelement doc ns1 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar defelement doc ns2 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar defelement elm1 ns2 {}
        grammar defelement elm2 ns2 any
        grammar defelement elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar delete
    set result
} 1

test schema-1.10 {Local element definition} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm1 1 {
            element a
            element b
        }
    }
    grammar defelement c text
    grammar defelement d text
    grammar defelement elm1 {
        element c
        element d
    }
    grammar delete
} {}

test schema-1.11 {define} {
    tdom::schema create grammar
    set result [catch {grammar define {
        element elm1
    }} errMsg]
    grammar delete
    lappend result $errMsg
} {1 {Command not allowed at top level in schema define evaluation}}

test schema-1.12 {define} {
    tdom::schema create grammar
    set result [catch {grammar define {
        defelement elm1 {
            element a
            element b
        }
        element elm1
    }} errMsg]
    grammar delete
    lappend result $errMsg
} {1 {Command not allowed at top level in schema define evaluation}}

test schema-1.13 {define lots of elements} {
    tdom::schema create s
    s define {
        defelement elm1 {
            for {set i 1} {$i <= 1000} {incr i} {
                element a$i ?
            }
        }
        for {set i 1} {$i <= 1000} {incr i} {
            defelement a$i {}
        }
    }
    s delete
} {}

test schema-2.1 {grammar definition: ref} {
    tdom::schema create grammar
    grammar defpattern thisPattern {
        element a
        element b
    }
    grammar defpattern thatPattern {
        element c
        element d
    }
    grammar defelement doc {
        ref thisPattern
        ref thatPattern ?
    }
    grammar delete
} {}

test schema-2.2 {grammar definition: ref} {
    tdom::schema create grammar
    set result [grammar nrForwardDefinitions]
    grammar defelement doc {
        ref thisPattern
        ref thatPattern ?
    }
    lappend result [grammar nrForwardDefinitions]
    grammar delete
    set result
} {0 2}

test schema-3.1 {grammar definition: choice} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

test schema-3.2 {grammar definition: choice} {
    tdom::schema create grammar
    grammar defpattern thisPattern {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

proc pullValidate {g xml} {
    tdom::pullparser pp
    pp input $xml
    while {[pp next] ne "END_DOCUMENT"} {
        switch [pp state] {
            "START_TAG" {
                $g event start [pp tag]
            }
            "END_TAG" {
                $g event end
            }
            "TEXT" {
                $g event text [pp text]
            }
        }
    }
}

test schema-4.1 {validation} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    pullValidate grammar {
        <doc><e1/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-4.1a {validation} {
    tdom::schema create s
    s defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        s defelement $e {}
    }
    set result [list]
    foreach xml {
        <doc><e1/></doc>
        <doc><e1/><e2/></doc>
        <doc><e1/><e2/><e2/><e2/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1}

test schema-4.2 {validation} {
    tdom::schema create s
    s defelement doc {
        element e1 *
    }
    s defelement e1 {
        element ee1
        element ee2
    }
    foreach e {ee1 ee2} {
        s defelement $e {}
    }
    set result [list]
    foreach xml {
        <doc></doc>
        <doc><e1/></doc>
        <doc><e1><ee1/><ee2/></e1></doc>
        <doc><e1><ee1/><ee2/></e1><e1><ee1/><ee2/></e1><e1><ee1/><ee2/></e1></doc>
        <doc><e1><ee1/><ee2/></e1><e1><ee1/><ee2/><unknown/></e1></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 1 1 0}

test schema-4.3 {domvalidate} {
    tdom::schema s 
    s define {
        defelement addressBook {
            element card *
        }
        defelement card {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e {text}
        }
    }
    set result [s validate {
<addressBook>
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
  </card>
</addressBook>        
    }]
    s delete
    set result
} 1

test schema-5.1 {dom parse -validateCmd} {
    set result [catch {
        [dom parse -validateCmd tdom::schema <doc/>]
    }]
} 1

test schema-5.2 {dom parse -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar reset
    dom parse -validateCmd grammar {
        <doc><e1/><e2/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar reset
    dom parse -validateCmd grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar delete
} {}

proc schema-5.3 {base systemId publicId} {
    return [list "string" "" "<foo/>"]
}

test schema-5.3 {dom parse -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    set result [catch {dom parse -validateCmd grammar \
                           -externalentitycommand schema-5.3 {
                               <!DOCTYPE doc [
                                              <!ENTITY e1 PUBLIC "e1" "e1.xml">
                                             ]>
                                   <doc>&e1;</doc>} doc} errMsg]
    grammar delete
    set result
} 1

test schema-5.4 {define} {
    tdom::schema create grammar
    grammar define {
        defelement elm1 {
            element a
            element b
        }
        defelement a {
            element c
        }
        defelement b {}
        defelement c {}
    }
    set doc [dom parse -validateCmd grammar {
        <elm1><a><c/></a><b/></elm1>
    }]
    $doc delete
    grammar delete
} {}


test schema-6.1 {expat parser with -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    ::xml::parser p -validateCmd grammar
    set result [catch {p parse {<doc><e2/></doc>}} errMsg]
    p delete
    grammar delete
    set result
} 1

test schema-7.1 {group} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        group ! {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.1.1 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group ! {
                element e1
                element e2
            }
            group ! {
                element e1
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.2 {group} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        group 2 {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.2.1 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group 2 {
                element e1
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.3 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group 2 {
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1><e2/></e1><e2/><e1><e2/></e1><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.4 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1><e2/></e1><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.5 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    ::xml::parser p -validateCmd grammar
    p parse {
        <doc><e1/><e1><e2/></e1><e2/></doc>
    }
    p delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.6 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a foouri {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b foouri {
            element b1 3
            group 3 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e foouri {}
        }
        defelement doc foouri {
            group {
                ref a
                ref b 
            }
        }
    }
    set result [grammar validate {
         <doc xmlns="foouri">
           <!-- ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- ref a end -->
           <!-- ref b start -->
           <b1/>
           <b1/>
           <b1/>
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <!-- inside ref b: ref a end -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <!-- inside ref b: ref a end -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    }]
    grammar delete
    set result
} 1

test schema-7.7 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a  {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b  {
            element b1 *
            group 1 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e  {}
        }
        defelement doc  {
            group 2 {
                ref b
            }
        }
    }
    set doc [dom parse -validateCmd grammar {
         <doc>
           <!-- ref b start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- inside ref b: ref a start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    }]
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    set result [grammar validate {
         <doc>
           <!-- ref b start -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- inside ref b: ref a start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    } msg]
    grammar delete
    set result
} 1

test schema-7.8 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a foouri {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e foouri {}
        }
        defelement doc foouri {
            group {
                ref a
            }
        }
    }
    set doc [dom parse -validateCmd grammar {
         <doc xmlns="foouri">
           <!-- ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- ref a end -->
         </doc>
    }]
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.9 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc>]
    grammar delete
    set result
} 1

test schema-7.10 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc>]
    grammar delete
    set result
} 0

test schema-7.10a {loop over seq} {
    tdom::schema create grammar
    set result [catch {grammar define {
        defelement doc {
            group 2 {
                element a
                element b
            }
            element c
            foreach e {a b c} {
                defelement $e {}
            }
        }
    }}]
    grammar delete
    set result
} 1

test schema-7.10b {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><a/></b><c/></doc> errMsg]
    grammar delete
    set result
} 0

test schema-7.10c {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [catch {
        set doc [dom parse -validateCmd grammar <doc><a/></b><c/></doc>]
    }]
    grammar delete
    set result
} 1

test schema-7.11 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc> errMsg]
    lappend result [grammar validate <doc><a/><b/><c/></doc>]
    lappend result [grammar validate <doc><a/><b/><a/><b/><c/></doc>]
    lappend result [grammar validate <doc><a/><b/><a/><b/></doc>]
    grammar delete
    set result
} {1 1 1 0}

test schema-7.12 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc> errMsg]
    lappend result [grammar validate <doc><a/><b/><c/><d/></doc>]
    lappend result [grammar validate <doc><a/><b/><c/></doc>]
    lappend result [grammar validate <doc><a/><b/><a/><b/><c/></doc>]
    lappend result [grammar validate <doc><a/><b/></doc>]
    grammar delete
    set result
} {0 0 1 0 0}

test schema-7.13 {long sequence} {
    tdom::schema create s
    s define {
        defelement doc {
            for {set i 1} {$i < 200} {incr i} {
                element e$i
            }
        }
        for {set i 1} {$i < 200} {incr i} {
            defelement e$i {element a}
        }
        defelement a {}
    }
    set xml "<doc>"
    for {set i 1} {$i < 200} {incr i} {
        append xml "<e$i><a/></e$i>"
    }
    append xml "</doc>"
    set result [s validate $xml]
    s delete
    set result
} 1


test schema-7.14 {mixed} {
    tdom::schema create s
    s define {
        defelement doc {
            mixed {
                element a
                element b
            }
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc></doc>
        <doc>text</doc>
        <doc>text<a/></doc>
        <doc><a/></doc>
        <doc>some<a/><b/></doc>
        <doc>some<a/><unknown/><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 1 1 0}

test schema-7.14a {mixed} {
    tdom::schema create s
    s define {
        defelement doc {
            mixed ! {
                element a
                element b
            }
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc>text</doc>
        <doc>text<a/></doc>
        <doc><a/></doc>
        {<doc><b/>to much</doc>}
        <doc>some<a/><b/></doc>
        <doc><unknown/><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 1 0 0 0}

        # <doc/>
        # <doc><a/></doc>
        # <doc><a/><c/></doc>
        # <doc><a/><a/><a/></doc>
        # <doc><a/><a/><a/><c/></doc>
        # <doc><b/><b/><b/><c/></doc>
        # <doc><c/></doc>


test schema-7.15 {choice with optional choices} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a *
                element b *
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc><a/><a/><a/></doc>
    } {
        lappend result [s validate $xml errMsg]
        puts $errMsg
    }
    set result
} {0 0 1 0 1 1 1}

test schema-8.1 {validate method} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    set result [grammar validate <doc><e1/></doc>]
    lappend result [grammar validate <doc><e1/><e1/></doc> errMsg]
    lappend result [grammar validate <doc><e1/><e2/></doc> errMsg]
    lappend result [grammar validate <doc><e1/><e2/><e2/><e2/></doc> errMsg]
    lappend result [grammar validate <doc><e1/><e2/><e2/><e1/></doc> errMsg]
    grammar delete
    set result
} {1 0 1 1 0}

test schema-8.2 {validate method} {
    tdom::schema create grammar
    grammar defelement doc foouri {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e foouri {}
    }
    set result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>} errMsg]
    grammar delete
    set result
} {1 0}

test schema-8.3 {validate method: white space between elements} {
    tdom::schema create grammar
    grammar define {
        defpattern a  {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b  {
            element b1 *
            group 2 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e  {}
        }
        defelement doc  {
            group {
                ref b
            }
        }
    }
    set result [grammar validate {
         <doc>
           <!-- ref b start -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- inside ref b: ref a start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    } msg]
    grammar delete
    set result
} 1

test schema-8.4 {illegal text} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><a/><b/>wrong<c/></doc> errMsg]
    grammar delete
    set result
} 0

test schema-8.5 {illegal text - expat not signaling XML_STATUS_SUSPENDED although XML_StopParser() was called in handler, again.} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><a/><b/>wrong<c/></doc> errMsg]
    grammar delete
    set result
} 0

test schema-8.6 {} {
    tdom::schema create s
    s define {
        defelement doc {}
    }
    set result [s validate <doc/>]
    lappend result [s validate <wrong/>]
    s start mydoc
    lappend result [s validate <doc/>]
    s delete
    set result
} {1 0 0}

test schema-9.1 {choice} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            choice * {
                element e1
                element e2
            }
        }
        foreach e {e1 e2} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {1 1 1 1 1 1}

test schema-9.2 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            group {
                element e1
                element e2 *
            }
        }
        foreach e {e1 e2} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/><e2/><e2/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {0 1 0 0 0 0 1}

test schema-9.3 {choice} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            choice * {
                element e1
                group {
                    element e2
                    element e3
                }
            }
        }
        foreach e {e1 e2} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e3/><e2/><e3/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {1 1 1 1 1 1 0}

test schema-9.4 {choice} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            choice 2 {
                element e1
                group {
                    element e2
                    element e3
                }
            }
        }
        foreach e {e1 e2 e3} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {0 0 0 1 1 1 1 0}

test schema-10.1 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [s validate {<doc><a/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}]
    s delete
    set result
} {1 1}            

test schema-10.2 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any 1
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [s validate {<doc><a/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><something/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><b/></doc>}]
    lappend result [s validate {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}]
    s delete
    set result
} {1 0 0 1}

test schema-10.3 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any ?
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [s validate {<doc><a/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><something/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><b/></doc>}]
    lappend result [s validate {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}]
    s delete
    set result
} {1 0 0 1}

test schema-10.4 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any 2
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [s validate {<doc><a/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><something/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><b/></doc>}]
    lappend result [s validate {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}]
    s delete
    set result
} {0 1 0 0}

test schema-11.1 {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            attribute attr1
            attribute attr2 ?
        }
    }
    set result [s validate {<doc attr1="foo" attr2="bar"/>}]
    lappend result [s validate {<doc attr1="foo"/>}]
    lappend result [s validate {<doc attr2="bar"/>}]
    lappend result [s validate {<doc attr1="foo" attr2="bar" unknownAtt="grill"/>}]
    s delete
    set result
} {1 1 0 0}

test schema-11.1a {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            attribute attr1
            attribute attr2 ?
        }
    }
    set result [list]
    foreach xml {
        {<doc attr1="foo" attr2="bar"/>}
        {<doc attr1="foo"/>}
        {<doc attr2="bar"/>}
        {<doc attr1="foo" attr2="bar" unknownAtt="grill"/>}
    } {
        lappend result [catch {set doc [dom parse -validateCmd s $xml]} errMsg]
        catch {$doc delete}
        s reset
    }
    s delete
    set result
} {0 0 1 1}

test schema-11.1b {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            attribute attr1
            attribute attr2 ?
        }
    }
    ::xml::parser p -validateCmd s    
    set result [list]
    foreach xml {
        {<doc attr1="foo" attr2="bar"/>}
        {<doc attr1="foo"/>}
        {<doc attr2="bar"/>}
        {<doc attr1="foo" attr2="bar" unknownAtt="grill"/>}
    } {
        lappend result [catch {p parse $xml} errMsg]
        p reset
        s reset
    }
    s delete
    p delete
    set result
} {0 0 1 1}

test schema-11.2 {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            element e 1 {
                attribute attr3 ?
                attribute attr4 !
            }
            attribute attr2 ?
        }
    }
    set result [s validate {<e attr1="attr1" attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}]
    lappend result [s validate {<e attr1="attr1"><e attr3="attr3" attr4="attr4"/></e>}]
    lappend result [s validate {<e attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}]
    lappend result [s validate {<e attr1="attr1"><e attr4="attr4"/></e>}]
    lappend result [s validate {<e attr1="attr1"><e attr3="attr3"/></e>}]
    s delete
    set result
} {1 1 0 1 0}

test schema-11.2a {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            element e 1 {
                attribute attr3 ?
                attribute attr4 !
            }
            attribute attr2 ?
        }
    }
    set result [list]
    foreach xml {
        {<e attr1="attr1" attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3"/></e>}
    } {
        lappend result [catch {set doc [dom parse -validateCmd s $xml]} errMsg]
        catch {$doc delete}
        s reset
    }
    s delete
    set result
} {0 0 1 0 1}

test schema-11.2b {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            element e 1 {
                attribute attr3 ?
                attribute attr4 !
            }
            attribute attr2 ?
        }
    }
    ::xml::parser p -validateCmd s    
    set result [list]
    foreach xml {
        {<e attr1="attr1" attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3"/></e>}
    } {
        lappend result [catch {p parse $xml} errMsg]
        p reset
        s reset
    }
    p delete
    s delete
    set result
} {0 0 1 0 1}

test schema-11.3 {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            attribute attr3 ?
            attribute attr4 !
            attribute attr2 ?
        }
    }
    set result [s validate <e/> errMsg]
    lappend result $errMsg
    s delete
    set result
} {0 {error "Missing mandatory attribute(s): attr1 attr4" at line 1 character 4}}

test schema-11.3a {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            attribute attr3 ?
            attribute attr4 !
            attribute attr2 ?
        }
    }
    set result [catch {dom parse -validateCmd s <e/>} errMsg]
    lappend result $errMsg
    s delete
    set result
} {1 {Missing mandatory attribute(s): attr1 attr4, referenced at line 1 character 4}}

test schema-11.3b {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            attribute attr3 ?
            attribute attr4 !
            attribute attr2 ?
        }
    }
    ::xml::parser p -validateCmd s    
    set result [catch {p parse <e/>} errMsg]
    lappend result $errMsg
    p delete
    s delete
    set result
} {1 {Missing mandatory attribute(s): attr1 attr4}}

test schema-11.4 {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace ?
            }
        }
    }
    set result [s validate {<doc><e foo="bar"/></doc>} errMsg]
    s delete
    lappend result $errMsg
} {1 {}}

test schema-11.4a {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace ?
            }
        }
    }
    set result [catch {set doc [dom parse -validateCmd s {<doc><e foo="bar"/></doc>}]}]
    s delete
    $doc delete
    set result
} 0

test schema-11.4b {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace
            }
        }
    }
    set result [s validate {<doc><e xml:lang="en" foo="bar"/></doc>} errMsg]
    s delete
    lappend result $errMsg
} {1 {}}

test schema-11.5 {nsattribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace ?
            }
        }
    }
    set result [catch {set doc [dom parse -validateCmd s {<doc><e xml:lang="en" foo="bar"/></doc>}]}]
    s delete
    $doc delete
    set result
} 0

test schema-11.6 {nsattribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><e foo="bar"/></doc>}
        {<doc><e xml:lang="en"/></doc>}
        {<doc><e unknown="some"/></doc>}
        {<doc><e/></doc>}
    } {
        lappend result [catch {set doc [dom parse -validateCmd s $xml]} errMsg]
        lappend result $errMsg
        s reset
    }
    s delete
    set result
} {1 {Missing mandatory attribute(s): http://www.w3.org/XML/1998/namespace:lang, referenced at line 1 character 19} 1 {Missing mandatory attribute(s): foo, referenced at line 1 character 23} 1 {Unknown attribute "unknown", referenced at line 1 character 24} 1 {Missing mandatory attribute(s): foo http://www.w3.org/XML/1998/namespace:lang, referenced at line 1 character 9}}

test schema-12.1 {domvalidate} {
    tdom::schema s 
    s define {
        defelement addressBook {
            element card *
        }
        defelement card {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e {text}
        }
    }
    set doc [dom parse {
<addressBook>
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
  </card>
</addressBook>        
    }]
    set result [s domvalidate $doc]
    lappend result [s domvalidate [$doc documentElement]]
    lappend result [s domvalidate [[$doc documentElement] firstChild]]
    lappend result [s domvalidate [[[$doc documentElement] firstChild] firstChild]]
    $doc delete
    s delete
    set result
} {1 1 1 1}

test schema-12.2 {domvalidate} {
    tdom::schema s 
    s define {
        defelement addressBook {
            element card *
        }
        defelement card {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e {text}
        }
    }
    set doc [dom parse {
<addressBook>
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
    <some>John Smith</some>
  </card>
</addressBook>        
    }]
    set result [s domvalidate $doc errMsg]
    lappend result $errMsg
    $doc delete
    s delete
    set result
} {0 {Unexpected child element "some" for element "some"}}

test schema-13.1 {XML namespaces} {
    tdom::schema create s
    s defelement doc ns1 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    s defelement elm1 ns2 {}
    s defelement elm1 ns1 {
        choice {
            element fooElem
            element barElem +
        }
    }
    s defelement elm2 ns1 {}
    s defelement fooElem ns1 {}
    s defelement barElem ns1 {}
    set result [list]
    foreach xml {
        {<doc xmlns="ns1"><elm1><fooElem/></elm1></doc>}
        {<doc xmlns="ns1"><elm1><fooElem/></elm1><elm2/></doc>}
        {<n:doc xmlns:n="ns1"><n:elm1><n:fooElem/></n:elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns1"><n:fooElem/></elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns2"><n:fooElem/></elm1><n:elm2/></n:doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0}

test schema-13.2 {XML namespaces} {
    tdom::schema create s
    s defelement doc ns1 {
        namespace ns2 {
            element elm1
        }
        # Forward defined element inherits child namespace
        element elm2
    }
    s defelement elm1 ns2 {}
    s defelement elm1 ns1 {
        choice {
            element fooElem
            element barElem +
        }
    }
    s defelement elm2 ns1 {}
    s defelement fooElem ns1 {}
    s defelement barElem ns1 {}
    set result [list]
    foreach xml {
        {<doc xmlns="ns1"><elm1><fooElem/></elm1></doc>}
        {<doc xmlns="ns1"><elm1><fooElem/></elm1><elm2/></doc>}
        {<n:doc xmlns:n="ns1"><n:elm1><n:fooElem/></n:elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns1"><n:fooElem/></elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns2"/><n:elm2/></n:doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 1}

test schema-14.1 {text: isint} {
    tdom::schema s
    s defelement doc {
        text {
            isint
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>5</doc>
        <doc>eeee</doc>
        <doc>56666</doc>
        {<doc>   </doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 1 0}

proc proc-14.2 {param text} {
    if {$text in {one two tree}} {
        return true
    }
    return false
}

test schema-14.2 {text: tcl} {
    tdom::schema s
    s define {
        defelement doc {
            element a
            element b
        }
        defelement a {
            text {tcl string is lower -strict}
        }
        defelement b {
            text {tcl proc-14.2 foo}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b/></doc>
        <doc><a>abc</a><b>two</b></doc>
        <doc><a>aBc</a><b>two</b></doc>
        <doc><a>abc</a><b>four</b></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 0}

test schema-14.3 {attribute text: tcl} {
    tdom::schema s
    s define {
        defelement doc {
            element e 1 {
                attribute a ! {tcl string is lower -strict}
                attribute b ? {tcl proc-14.2 foo}
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><e a="abc" b="tree"/></doc>}
        {<doc><e a="aAc" b="tree"/></doc>}
        {<doc><e a="aa2c" b="tree"/></doc>}
        {<doc><e a="aaoiu"/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 0 1}

test schema-14.4 {text: fixed} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            attribute a ! {fixed enabled}
            text {fixed something}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e a="enabled">something</e></doc>}
        {<doc><e a="somehing">something</e></doc>}
        {<doc><e a="enabled">something else</e></doc>}
        {<doc><e a="enabled">something</e><e a="foo">something</e></doc>}
        {<doc><e a="enabled">something</e><e a="enabled">not</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 0 0 0 0}

test schema-14.5 {text: enumeration} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            attribute a {enumeration {enabled disabled}}
            text {enumeration {enabled disabled "a third"}}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e a="enabled">disabled</e></doc>}
        {<doc><e a="enabled">disabled</e><e a="disabled">a third</e></doc>}
        {<doc><e a="disabled">something</e></doc>}
        {<doc><e a="enabled">something else</e></doc>}
        {<doc><e a="enabled">enabled disabled</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0 0 0}

test schema-14.6 {text: match (glob style)} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            text {match {[a-zA-Z]*1[_!]}}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e>disabled1_</e></doc>}
        {<doc><e>dis able1_</e></doc>}
        {<doc><e>something</e></doc>}
        {<doc><e>a1!</e></doc>}
        {<doc><e>a1!/</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0 1 0}

test schema-14.7 {text: regexp} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            text {regexp {^[a-zA-Z]*1[_!]$}}
        }
    }
    set result [list]
    foreach xml {
        {<doc><e>disabled1_</e></doc>}
        {<doc><e>dis able1_</e></doc>}
        {<doc><e>something</e></doc>}
        {<doc><e>a1!</e></doc>}
        {<doc><e>a1!/</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 0 1 0}


}
