# Features covered: Schema validation
#
# Tested functionalities:
#    schema-1.*: Basics, interface
#    schema-2.*: Grammar definition ref
#    schema-3.*: Grammar definition choice
#    schema-4.*: Script level validation with event
#    schema-5.*: dom parse -validateCmd
#    schema-6.*: expat parser -validateCmd
#    schema-7.*: Validation checks.
#    schema-8.*: tdom::schema validate method
#    schema-9.*: Choice
#    scheam-10.*: Any
#
# Copyright (c) 2018 Rolf Ade.

source [file join [file dir [info script]] loadtdom.tcl]

test schema-1.1 {create} {
    tdom::schema create grammar
    grammar start doc
    grammar delete
} {}

test schema-1.2 {grammar cmd outside context} {
    catch {tdom::schema::element}
} {1}

test schema-1.3 {grammar cmd} {
    tdom::schema create grammar
    grammar defpattern somePattern {
        element foo !
    }
    grammar delete
} {}

test schema-1.4 {grammar cmd} {
    tdom::schema create grammar
    grammar defpattern somePattern {
        for {set i 0} {$i < 100} {incr i} {
            element foo$i !
        }
    }
    grammar delete
} {}

test schema-1.5 {grammar cmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2 *
    }
    grammar defelement elm1 empty
    grammar defelement elm2 empty
    grammar delete
} {}

test schema-1.6 {quants} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2 *
        element elm3 !
        element elm4 +
        element elm5 ?
        element elm6 1
        element elm7 5
        element elm8 12
        element elm9 {0 3}
        element elm9 {1 12}
        element elm10 "8 "
    }
    grammar delete
} {}

test schema-1.7 {quants} {
    tdom::schema create grammar
    grammar defelement doc {
        for {set i 0} {$i < 100} {incr i} {
            element elm$i [list $i [expr {$i + 1}]]
        }
    }
    grammar delete
} {}

test schema-1.8 {Same element name in different Namespaces} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2
    }
    grammar defelement doc ns1 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar defelement doc ns2 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar defelement elm1 ns2 empty
    grammar defelement elm2 ns2 any
    set result [catch {
        grammar defelement elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar defelement elm1 ns1 any
    grammar defelement elm2 ns1 empty
    grammar delete
    set result
} 1

test schema-1.9 {Same element name in different Namespaces} {
    tdom::schema create grammar
    set result [catch {
        grammar defelement doc {
            element elm1
            element elm2
        }
        grammar defelement doc ns1 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar defelement doc ns2 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar defelement elm1 ns2 empty
        grammar defelement elm2 ns2 any
        grammar defelement elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar delete
    set result
} 1

test schema-1.10 {Local element definition} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm1 1 {
            element a
            element b
        }
    }
    grammar defelement c text
    grammar defelement d text
    grammar defelement elm1 {
        element c
        element d
    }
    grammar delete
} {}

test schema-1.11 {define} {
    tdom::schema create grammar
    set result [catch {grammar define {
        element elm1
    }} errMsg]
    grammar delete
    lappend result $errMsg
} {1 {Command not allowed at top level in grammar define evaluation}}

test schema-1.12 {define} {
    tdom::schema create grammar
    set result [catch {grammar define {
        defelement elm1 {
            element a
            element b
        }
        element elm1
    }} errMsg]
    grammar delete
    lappend result $errMsg
} {1 {Command not allowed at top level in grammar define evaluation}}

test schema-2.1 {grammar definition: ref} {
    tdom::schema create grammar
    grammar defpattern thisPattern {
        element a
        element b
    }
    grammar defpattern thatPattern {
        element c
        element d
    }
    grammar defelement doc {
        ref thisPattern
        ref thatPattern ?
    }
    grammar delete
} {}

test schema-2.2 {grammar definition: ref} {
    tdom::schema create grammar
    set result [grammar nrForwardDefinitions]
    grammar defelement doc {
        ref thisPattern
        ref thatPattern ?
    }
    lappend result [grammar nrForwardDefinitions]
    grammar delete
    set result
} {0 2}

test schema-3.1 {grammar definition: choice} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

test schema-3.2 {grammar definition: choice} {
    tdom::schema create grammar
    grammar defpattern thisPattern {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

proc pullValidate {g xml} {
    tdom::pullparser pp
    pp input $xml
    while {[pp next] ne "END_DOCUMENT"} {
        switch [pp state] {
            "START_TAG" {
                $g event start [pp tag]
            }
            "END_TAG" {
                $g event end
            }
            "TEXT" {
                $g event text [pp text]
            }
        }
    }
}

test schema-4.1 {validation} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    pullValidate grammar {
        <doc><e1/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    }
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-5.1 {dom parse -validateCmd} {
    set result [catch {
        [dom parse -validateCmd tdom::schema <doc/>]
    }]
} 1

test schema-5.2 {dom parse -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar reset
    dom parse -validateCmd grammar {
        <doc><e1/><e2/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar reset
    dom parse -validateCmd grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    } doc
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    $doc delete
    grammar delete
} {}

proc schema-5.3 {base systemId publicId} {
    return [list "string" "" "<foo/>"]
}

test schema-5.3 {dom parse -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    set result [catch {dom parse -validateCmd grammar \
                           -externalentitycommand schema-5.3 {
                               <!DOCTYPE doc [
                                              <!ENTITY e1 PUBLIC "e1" "e1.xml">
                                             ]>
                                   <doc>&e1;</doc>} doc} errMsg]
    grammar delete
    set result
} 1

test schema-5.4 {define} {
    tdom::schema create grammar
    grammar define {
        defelement elm1 {
            element a
            element b
        }
        defelement a {
            element c
        }
        defelement b {}
        defelement c {empty}
    }
    set doc [dom parse -validateCmd grammar {
        <elm1><a><c/></a><b/></elm1>
    }]
    $doc delete
    grammar delete
} {}


test schema-6.1 {expat parser with -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    ::xml::parser p -validateCmd grammar
    set result [catch {p parse {<doc><e2/></doc>}} errMsg]
    p delete
    grammar delete
    set result
} 1

test schema-7.1 {group} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        group ! {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.1.1 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group ! {
                element e1
                element e2
            }
            group ! {
                element e1
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.2 {group} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        group 2 {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.2.1 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group 2 {
                element e1
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.3 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group 2 {
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1><e2/></e1><e2/><e1><e2/></e1><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.4 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1><e2/></e1><e2/></doc>
    } doc
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.5 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
        }
        foreach e {e1 e2} {
            grammar defelement $e {}
        }
    }
    ::xml::parser p -validateCmd grammar
    p parse {
        <doc><e1/><e1><e2/></e1><e2/></doc>
    }
    p delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.6 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a foouri {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b foouri {
            element b1 *
            group 2 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e foouri {}
        }
        defelement doc foouri {
            group {
                ref a
                ref b 2
            }
        }
    }
    set doc [dom parse -validateCmd grammar {
         <doc xmlns="foouri">
           <!-- ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- ref a end -->
           <!-- ref b start -->
           <b1/>
           <b1/>
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
           <!-- ref b start -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref a: ref b end -->
           <!-- ref b end -->
         </doc>
    }]
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.7 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a  {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b  {
            element b1 *
            group 2 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e  {}
        }
        defelement doc  {
            group {
                ref b
            }
        }
    }
    set doc [dom parse -validateCmd grammar {
         <doc>
           <!-- ref b start -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- inside ref b: ref a start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    }]
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.8 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a foouri {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e foouri {}
        }
        defelement doc foouri {
            group {
                ref a
            }
        }
    }
    set doc [dom parse -validateCmd grammar {
         <doc xmlns="foouri">
           <!-- ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- ref a end -->
         </doc>
    }]
    $doc delete
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-7.9 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc>]
    grammar delete
    set result
} 1

test schema-7.10 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc>]
    grammar delete
    set result
} 0

test schema-7.10a {loop over seq} {
    tdom::schema create grammar
    set result [catch {grammar define {
        defelement doc {
            group 2 {
                element a
                element b
            }
            element c
            foreach e {a b c} {
                defelement $e {}
            }
        }
    }}]
    grammar delete
    set result
} 1

test schema-7.10b {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><a/></b><c/></doc> errMsg]
    grammar delete
    set result
} 0

test schema-7.10c {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [catch {
        set doc [dom parse -validateCmd grammar <doc><a/></b><c/></doc>]
    }]
    grammar delete
    set result
} 1

test schema-7.11 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc> errMsg]
    grammar reset
    lappend result [grammar validate <doc><a/><b/><c/></doc>]
    grammar reset
    lappend result [grammar validate <doc><a/><b/><a/><b/><c/></doc>]
    grammar reset
    lappend result [grammar validate <doc><a/><b/><a/><b/></doc>]
    grammar delete
    set result
} {0 1 1 0}

test schema-7.12 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc> errMsg]
    grammar reset
    lappend result [grammar validate <doc><a/><b/><c/></doc>]
    grammar reset
    lappend result [grammar validate <doc><a/><b/><a/><b/><c/></doc>]
    grammar reset
    lappend result [grammar validate <doc><a/><b/></doc>]
    grammar delete
    set result
} {0 1 0 0}

test schema-8.1 {validate method} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    set result [grammar validate <doc><e1/></doc>]
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    lappend result [grammar validate <doc><e1/><e1/></doc> errMsg]
    grammar delete
    set result
} {1 0}

test schema-8.2 {validate method} {
    tdom::schema create grammar
    grammar defelement doc foouri {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e foouri {}
    }
    set result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    if {[grammar state] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>} errMsg]
    grammar delete
    set result
} {1 0}

test schema-9.1 {choice} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            choice * {
                element e1
                element e2 *
            }
        }
        foreach e {e1 e2} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    grammar reset
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    grammar reset
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    grammar reset
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e1/></doc>}]
    grammar delete
    set result
} {1 1 1 1}
    

test schema-10.1 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [s validate {<doc><a/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}]
    s delete
    set result
} {1 1}            
