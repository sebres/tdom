# Features covered: Schema validation
#
# Tested functionalities:
#    schema-1.*: Basics, interface
#    schema-2.*: Grammar definition ref
#    schema-3.*: Grammar definition choice
#    schema-4.*: Script level validation with event
#    schema-5.*: dom parse -validateCmd
#    schema-6.*: expat parser -validateCmd
#    schema-7.*: Validation checks.
#    schema-8.*: tdom::schema validate method
#    schema-9.*: Choice
#    schema-10.*: Any
#    schema-11.*: attribute, nsattribute
#    schema-12.*: schemaCmd domvalidate
#    schema-13.*: XML namespaces
#    schema-14.*: text
#    schema-15.*: Constraint cmd tcl
#    schema-16.*: interleave
#    schema-17.*: info
#    schema-18.*: reportcmd
#    schema-19.*: keyspace
#    schema-20.*: domunique
#
# Copyright (c) 2018 Rolf Ade.

source [file join [file dir [info script]] loadtdom.tcl]

if {[dom featureinfo schema]} {

test schema-1.1 {create} {
    tdom::schema create grammar
    grammar start doc
    grammar delete
} {}

test schema-1.2 {grammar cmd outside context} {
    catch {tdom::schema::element}
} {1}

test schema-1.3 {grammar cmd} {
    tdom::schema create grammar
    grammar defpattern somePattern {
        element foo !
    }
    grammar delete
} {}

test schema-1.4 {grammar cmd} {
    tdom::schema create grammar
    grammar defpattern somePattern {
        for {set i 0} {$i < 100} {incr i} {
            element foo$i !
        }
    }
    grammar delete
} {}

test schema-1.5 {grammar cmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2 *
    }
    grammar defelement elm1 {}
    grammar defelement elm2 {}
    grammar delete
} {}

test schema-1.6 {quants} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2 *
        element elm3 !
        element elm4 +
        element elm5 ?
        element elm6 1
        element elm7 5
        element elm8 12
        element elm9 {0 3}
        element elm9 {1 12}
        element elm10 "8 "
    }
    grammar delete
} {}

test schema-1.7 {quants} {
    tdom::schema create grammar
    grammar defelement doc {
        for {set i 0} {$i < 100} {incr i} {
            element elm$i [list $i [expr {$i + 1}]]
        }
    }
    grammar delete
} {}

test schema-1.8 {Same element name in different Namespaces} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm2
    }
    grammar defelement doc ns1 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar defelement doc ns2 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    grammar defelement elm1 ns2 {}
    grammar defelement elm2 ns2 any
    set result [catch {
        grammar defelement elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar defelement elm1 ns1 any
    grammar defelement elm2 ns1 {}
    grammar delete
    set result
} 1

test schema-1.9 {Same element name in different Namespaces} {
    tdom::schema create grammar
    set result [catch {
        grammar defelement doc {
            element elm1
            element elm2
        }
        grammar defelement doc ns1 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar defelement doc ns2 {
            # Forward defined element inherits child namespace
            element elm1
            element elm2
        }
        grammar defelement elm1 ns2 {}
        grammar defelement elm2 ns2 any
        grammar defelement elm1 ns1 {
            choice {
                element fooElem
                element barElem +
            }
            error
        }
    }]
    grammar delete
    set result
} 1

test schema-1.10 {Local element definition} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm1
        element elm1 1 {
            element a
            element b
        }
    }
    grammar defelement c text
    grammar defelement d text
    grammar defelement elm1 {
        element c
        element d
    }
    grammar delete
} {}

test schema-1.11 {define} {
    tdom::schema create grammar
    set result [catch {grammar define {
        element elm1
    }} errMsg]
    grammar delete
    lappend result $errMsg
} {1 {Command not allowed at top level in schema define evaluation}}

test schema-1.12 {define} {
    tdom::schema create grammar
    set result [catch {grammar define {
        defelement elm1 {
            element a
            element b
        }
        element elm1
    }} errMsg]
    grammar delete
    lappend result $errMsg
} {1 {Command not allowed at top level in schema define evaluation}}

test schema-1.13 {define lots of elements} {
    tdom::schema create s
    s define {
        defelement elm1 {
            for {set i 1} {$i <= 1000} {incr i} {
                element a$i ?
            }
        }
        for {set i 1} {$i <= 1000} {incr i} {
            defelement a$i {}
        }
    }
    s delete
} {}

test schema-1.14 {define start w/ namespace} {
    tdom::schema create s
    s start doc http://foo.bar
    s defelement doc http://foo.bar {
        element a
        element b
    }
    foreach elm {a b} {
        s defelement $elm http://foo.bar {}
    }
    set result [list]
    foreach xml {
        {<doc xmlns="http://foo.bar"><a/><b/></doc>}
        {<a:doc xmlns:a="http://foo.bar"><a:a/><a:b/></a:doc>}
        {<a:doc xmlns:a="http://foo.bar"><a xmlns="http://foo.bar"/><a:b/></a:doc>}
        {<doc><a/><b/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0}

test schema-1.14a {define start w/ namespace} {
    tdom::schema create s
    s prefixns {ns1 http://foo.bar}
    s start doc ns1
    s defelement doc ns1 {
        element a
        element b
    }
    foreach elm {a b} {
        s defelement $elm ns1 {}
    }
    set result [list]
    foreach xml {
        {<doc xmlns="http://foo.bar"><a/><b/></doc>}
        {<a:doc xmlns:a="http://foo.bar"><a:a/><a:b/></a:doc>}
        {<a:doc xmlns:a="http://foo.bar"><a xmlns="http://foo.bar"/><a:b/></a:doc>}
        {<doc><a/><b/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0}

test schema-1.15 {call structure constraint outside define/defelement} {
    set result [catch {tdom::schema::element foo} errMsg]
    lappend result $errMsg
    tdom::schema create grammar
    lappend result [catch {tdom::schema::element foo} errMsg]
    lappend result $errMsg
    lappend result [catch {grammar define {::tdom::schema::element foo}} errMsg]
    lappend result $errMsg
    lappend result [catch {grammar defelement bar {::tdom::schema::element foo}} errMsg]
    lappend result $errMsg
    grammar delete
    set result
} {1 {Command called outside of schema context} 1 {Command called outside of schema context} 1 {Command not allowed at top level in schema define evaluation} 0 {}}

test schema-1.16 {call another schema cmd in a schema definition script} {
    tdom::schema create s1
    s1 define {
        defelement s1a {
            element s1b *
            element s1c
        }
        ::tdom::schema ::s2
        s2 define {
            defelement s1a {
                element s1b *
                element s1c
            }
        }
        defelement s1b {
            element s1b1
        }
    }
    set result [list]
    foreach xml {
        <s1a/>
        <s1a><s1b/><s1c/></s1a>
        <s1a><s1c/></s1a>
        <s1a><s1b><s1b1/></s1b><s1c/></s1a>
    } {
        lappend result [s1 validate $xml]
        lappend result [s2 validate $xml]
    }
    s1 delete
    s2 delete
    set result
} {0 0 0 1 1 1 1 0}

test schema-1.17 {call schema cmd evaluation in his own schema definition script} {
    tdom::schema create s1
    set result [catch {s1 define {
        defelement s1a {
            s1 defelement s1b {
                element s1b1
            }
            element s1b *
            element s1c
        }
    }} errMsg]
    s1 delete
    set result
} 1

test schema-1.18 {delete schema cmd in definition script} {
    tdom::schema create s
    s define {
        defelement e {
            s delete
            element e1 1 {
                set ::result [catch {s delete}]
            }
        }
    }
    lappend result [info commands s]
} {1 {}}

test schema-1.19 {call top level schema cmd in definition script} {
    tdom::schema create s
    set result [catch {s define {
        defelement e {
            element e1 1 {
                deftext foo {minLength 1}
                defelement bar {}
            }
            element bar
        }
    }}]
    lappend result [info commands s]
    s delete
    set result
} {1 s}

test schema-1.20 {call top level schema cmd in definition script} {
    tdom::schema create s
    set result [catch {s defelement e {
            element e1 1 {
                deftext foo {minLength 1}
                defelement bar {}
            }
            element bar
        }
    }]
    lappend result [info commands s]
    s delete
    set result
} {1 s}

test schema-1.21 {Create other schema cmd in definition script} {
    tdom::schema create s1
    s1 defelement e {
        element e1 1 {}
        element e1 1 {
            ::tdom::schema create ::s2
            ::s2 define {
                defelement s2 {
                    element s2e
                    element s2ee
                }
                foreach e {s2e s2ee} {
                    defelement $e {text}
                }
            }
        }
    }
    set result [info commands s1]
    lappend result [info commands s2]
    foreach xml {
        <e><e1/><e1/></e>
        <s2><s2e>foo</s2e><s2ee/></s2>
    } {
        lappend result [s1 validate $xml]
        lappend result [s2 validate $xml]
    }
    s2 delete
    s1 delete
    set result
} {s1 s2 1 0 0 1}

test schema-1.22 {nrForwardDefinitions} {
    tdom::schema create s
    set result [list]
    s define {
        defelement e {
            lappend ::result [s nrForwardDefinitions]
            element e1
            lappend ::result [s nrForwardDefinitions]
            element e1
            lappend ::result [s nrForwardDefinitions]
            element e2
            lappend ::result [s nrForwardDefinitions]
        }
        foreach e {e1 e2} {
            defelement $e {text}
            lappend ::result [s nrForwardDefinitions]
        }
    }
    s delete
    set result
} {0 1 1 2 1 0}

test schema-1.23 {prefixns} {
    tdom::schema create s
    set result [list]
    lappend result [s prefixns]
    lappend result [s prefixns {a b}]
    lappend result [s prefixns]
    lappend result [s prefixns {a b a b c d}]
    lappend result [s prefixns {}]
    lappend result [s prefixns ""]
    lappend result [catch {s prefixns a b c} errMsg]
    lappend result $errMsg
    lappend result [catch {s prefixns {a b c}} errMsg]
    lappend result $errMsg
    lappend result [catch {s prefixns "a \{"} errMsg]
    lappend result $errMsg
    s delete
    set result
} {{} {a b} {a b} {a b a b c d} {} {} 1 {wrong # args: should be "s prefixns ?prefixUriList?"} 1 {The optional argument to prefixns must be a 'prefix namespace' pairs list} 1 {The optional argument to prefixns must be a 'prefix namespace' pairs list}}

test schema-1.24 {prefixns} {
    tdom::schema create s
    set result [list]
    lappend result [s define prefixns]
    lappend result [s define {prefixns {a b}}]
    lappend result [s define {prefixns}]
    lappend result [s define {prefixns {a b a b c d}}]
    lappend result [s define {prefixns {}}]
    lappend result [s define {prefixns ""}]
    lappend result [catch {s define {prefixns a b c}} errMsg]
    lappend result $errMsg
    lappend result [catch {s define {prefixns {a b c}}} errMsg]
    lappend result $errMsg
    lappend result [catch {s define {prefixns "a \{"}} errMsg]
    lappend result $errMsg
    s delete
    set result
} {{} {a b} {a b} {a b a b c d} {} {} 1 {wrong # args: should be "prefixns ?prefixUriList?"} 1 {The optional argument to prefixns must be a 'prefix namespace' pairs list} 1 {The optional argument to prefixns must be a 'prefix namespace' pairs list}}

test schema-1.25 {prefixns} {
    set result [list]
    set schema {
        defelement doc ns1 {
            element e
        }
    }
    set xml {<doc xmlns="http://tdom.org/test"><e/></doc>}
    # 1
    tdom::schema create s
    s define $schema
    lappend result [s validate $xml]
    s delete
    # 2
    tdom::schema create s
    s prefixns {ns1 http://tdom.org/test}
    s define $schema
    lappend result [s validate $xml]
    s delete
    # 3
    tdom::schema create s
    s prefixns {ns1 http://foo.bar}
    s define $schema
    lappend result [s validate $xml]
    s delete
    # 4
    tdom::schema create s
    s prefixns {ns1 http://tdom.org/test ns1 http://foo.bar}
    s define $schema
    lappend result [s validate $xml]
    s delete
    # 5
    tdom::schema create s
    s prefixns {ns1 http://foo.bar ns1 http://tdom.org/test}
    s define $schema
    lappend result [s validate $xml]
    s delete
    # 6
    tdom::schema create s
    s prefixns {ns1 http://foo.bar}
    s prefixns {ns1 http://tdom.org/test ns1 http://foo.bar}
    s define $schema
    lappend result [s validate $xml]
    s delete
    # 7
    tdom::schema create s
    s define {
        prefixns {ns1 http://tdom.org/test}
        defelement doc ns1 {
            element e
        }
        prefixns {ns2 http://foo.bar}
        defelement e ns2 {text {minLength 1}}
    }
    lappend result [s validate $xml]
    s delete
    # 8
    tdom::schema create s
    s define {
        prefixns {ns1 http://tdom.org/test}
        defelement doc ns1 {
            namespace http://foo.bar {
                element e 
            }
        }
        prefixns {ns2 http://foo.bar}
        defelement e ns2 {text {minLength 1}}
    }
    lappend result [s validate $xml]
    # 9
    lappend result [s validate {<doc xmlns="http://tdom.org/test"><e xmlns="http://foo.bar"/></doc>}]
    # 10
    lappend result [s validate {<doc xmlns="http://tdom.org/test"><e xmlns="http://foo.bar">foo</e></doc>}]
    s delete
    # 11 
    tdom::schema create s
    s define {
        prefixns {ns1 http://tdom.org/test ns2 http://foo.bar}
        defelement doc ns1 {
            namespace ns2 {
                element e 
            }
        }
        prefixns {ns2 http://foo.bar}
        defelement e ns2 {text {minLength 1}}
    }
    lappend result [s validate $xml]
    # 12
    lappend result [s validate {<doc xmlns="http://tdom.org/test"><e xmlns="http://foo.bar"/></doc>}]
    # 13
    lappend result [s validate {<doc xmlns="http://tdom.org/test"><e xmlns="http://foo.bar">foo</e></doc>}]
    s delete
    set result
} {0 1 0 1 0 1 1 0 0 1 0 0 1}

test schema-1.26 {prefixns} {
    tdom::schema create s
    set result [list]
    lappend result [catch {
        s defelement doc {
            prefixns {a http://foo.bar}
            namespace a {
                element e
            }
        }
    } errMsg]
    lappend result $errMsg
    lappend result [catch {
        s defelement doc {
            namespace a {
                element e
            }
            prefixns {a http://foo.bar}
        }
    } errMsg]
    lappend result $errMsg
    lappend result [catch {
        s define {
            defelement doc {
                prefixns {a http://foo.bar}
                namespace a {
                    element e
                }
            }
        }
    } errMsg]
    lappend result $errMsg
    lappend result [catch {
        s define {
            defelement doc {
                s prefixns {a http://foo.bar}
                namespace a {
                    element e
                }
            }
        }
    } errMsg]
    lappend result $errMsg
    s delete
    set result
} {1 {Command only allowed at lop level} 1 {Command only allowed at lop level} 1 {Method not allowed in nested schema define script} 1 {This recursive call is not allowed}}

test schema-1.27 {prefixns} {
    tdom::schema create s
    s define {
        prefixns {a http:://some.uri}
        defelement doc a {}
    }
    set result [s validate {<b:doc xmlns:b="a"/>} errMsg]
    lappend result $errMsg
    s delete
    set result
} {0 {error "Unknown element" at line 1 character 20}}

test schema-2.1 {grammar definition: ref} {
    tdom::schema create grammar
    grammar defpattern thisPattern {
        element a
        element b
    }
    grammar defpattern thatPattern {
        element c
        element d
    }
    grammar defelement doc {
        ref thisPattern
        ref thatPattern ?
    }
    grammar delete
} {}

test schema-2.2 {grammar definition: ref} {
    tdom::schema create grammar
    set result [grammar nrForwardDefinitions]
    grammar defelement doc {
        ref thisPattern
        ref thatPattern ?
    }
    lappend result [grammar nrForwardDefinitions]
    grammar delete
    set result
} {0 2}

test schema-3.1 {grammar definition: choice} {
    tdom::schema create grammar
    grammar defelement doc {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

test schema-3.2 {grammar definition: choice} {
    tdom::schema create grammar
    grammar defpattern thisPattern {
        element elm
        choice {
            element fooElem
            element barElem +
        }
        choice ? {
            element one {2 3}
            element two
        }
        element three
    }
    grammar delete
} {}

proc pullValidate {g xml} {
    tdom::pullparser pp
    pp input $xml
    while {[pp next] ne "END_DOCUMENT"} {
        switch [pp state] {
            "START_TAG" {
                $g event start [pp tag]
            }
            "END_TAG" {
                $g event end
            }
            "TEXT" {
                $g event text [pp text]
            }
        }
    }
}

test schema-4.1 {validation} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    pullValidate grammar {
        <doc><e1/></doc>
    }
    if {[grammar info vstate] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/></doc>
    }
    if {[grammar info validationstate] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar reset
    pullValidate grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    }
    if {[grammar info vstate] ne "FINISHED"} {
        error "Wrong state."
    }
    grammar delete
} {}

test schema-4.1a {validation} {
    tdom::schema create s
    s defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        s defelement $e {}
    }
    set result [list]
    foreach xml {
        <doc><e1/></doc>
        <doc><e1/><e2/></doc>
        <doc><e1/><e2/><e2/><e2/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1}

test schema-4.2 {validation} {
    tdom::schema create s
    s defelement doc {
        element e1 *
    }
    s defelement e1 {
        element ee1
        element ee2
    }
    foreach e {ee1 ee2} {
        s defelement $e {}
    }
    set result [list]
    foreach xml {
        <doc></doc>
        <doc><e1/></doc>
        <doc><e1><ee1/><ee2/></e1></doc>
        <doc><e1><ee1/><ee2/></e1><e1><ee1/><ee2/></e1><e1><ee1/><ee2/></e1></doc>
        <doc><e1><ee1/><ee2/></e1><e1><ee1/><ee2/><unknown/></e1></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 1 1 0}

test schema-4.3 {domvalidate} {
    tdom::schema s 
    s define {
        defelement addressBook {
            element card *
        }
        defelement card {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e {text}
        }
    }
    set result [s validate {
<addressBook>
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
  </card>
</addressBook>        
    }]
    s delete
    set result
} 1

test schema-5.1 {dom parse -validateCmd} {
    set result [catch {
        [dom parse -validateCmd tdom::schema <doc/>]
    }]
} 1

test schema-5.2 {dom parse -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/></doc>
    } doc
    $doc delete
    dom parse -validateCmd grammar {
        <doc><e1/><e2/></doc>
    } doc
    $doc delete
    dom parse -validateCmd grammar {
        <doc><e1/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
} {}

proc schema-5.3 {base systemId publicId} {
    return [list "string" "" "<foo/>"]
}

test schema-5.3 {dom parse -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    set result [catch {dom parse -validateCmd grammar \
                           -externalentitycommand schema-5.3 {
                               <!DOCTYPE doc [
                                              <!ENTITY e1 PUBLIC "e1" "e1.xml">
                                             ]>
                                   <doc>&e1;</doc>} doc} errMsg]
    grammar delete
    set result
} 1

test schema-5.4 {define} {
    tdom::schema create grammar
    grammar define {
        defelement elm1 {
            element a
            element b
        }
        defelement a {
            element c
        }
        defelement b {}
        defelement c {}
    }
    set doc [dom parse -validateCmd grammar {
        <elm1><a><c/></a><b/></elm1>
    }]
    $doc delete
    grammar delete
} {}


test schema-6.1 {expat parser with -validateCmd} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    ::xml::parser p -validateCmd grammar
    set result [catch {p parse {<doc><e2/></doc>}} errMsg]
    p delete
    grammar delete
    set result
} 1

test schema-7.1 {group} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        group ! {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    grammar delete
} {}

test schema-7.1.1 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group ! {
                element e1
                element e2
            }
            group ! {
                element e1
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    grammar delete
} {}

test schema-7.2 {group} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        group 2 {
            element e1
            element e2
        }
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    grammar delete
} {}

test schema-7.2.1 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group 2 {
                element e1
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1/><e2/><e1/><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    grammar delete
} {}

test schema-7.3 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            element e1
            group 2 {
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e2 *
        }
        foreach e {e1 e2} {
            defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1><e2/></e1><e2/><e1><e2/></e1><e2/><e2/><e2/><e2/></doc>
    } doc
    $doc delete
    grammar delete
} {}

test schema-7.4 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
        }
        foreach e {e1 e2} {
            defelement $e {}
        }
    }
    dom parse -validateCmd grammar {
        <doc><e1/><e1><e2/></e1><e2/></doc>
    } doc
    $doc delete
    grammar delete
} {}

test schema-7.5 {group with inline defined element} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
        }
        foreach e {e1 e2} {
            defelement $e {}
        }
    }
    ::xml::parser p -validateCmd grammar
    p parse {
        <doc><e1/><e1><e2/></e1><e2/></doc>
    }
    p delete
    grammar delete
} {}

test schema-7.6 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a foouri {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b foouri {
            element b1 3
            group 3 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e foouri {}
        }
        defelement doc foouri {
            group {
                ref a
                ref b 
            }
        }
    }
    set result [grammar validate {
         <doc xmlns="foouri">
           <!-- ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- ref a end -->
           <!-- ref b start -->
           <b1/>
           <b1/>
           <b1/>
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <!-- inside ref b: ref a end -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <!-- inside ref b: ref a end -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    }]
    grammar delete
    set result
} 1

test schema-7.7 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a  {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b  {
            element b1 *
            group 1 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e  {}
        }
        defelement doc  {
            group 2 {
                ref b
            }
        }
    }
    set doc [dom parse -validateCmd grammar {
         <doc>
           <!-- ref b start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- inside ref b: ref a start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    }]
    $doc delete
    set result [grammar validate {
         <doc>
           <!-- ref b start -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- inside ref b: ref a start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    } msg]
    grammar delete
    set result
} 1

test schema-7.8 {nested groups via refs} {
    tdom::schema create grammar
    grammar define {
        defpattern a foouri {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e foouri {}
        }
        defelement doc foouri {
            group {
                ref a
            }
        }
    }
    set doc [dom parse -validateCmd grammar {
         <doc xmlns="foouri">
           <!-- ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- ref a end -->
         </doc>
    }]
    $doc delete
    grammar delete
} {}

test schema-7.9 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc>]
    grammar delete
    set result
} 1

test schema-7.10 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc>]
    grammar delete
    set result
} 0

test schema-7.10a {loop over seq} {
    tdom::schema create grammar
    set result [catch {grammar define {
        defelement doc {
            group 2 {
                element a
                element b
            }
            element c
            foreach e {a b c} {
                defelement $e {}
            }
        }
    }}]
    grammar delete
    set result
} 1

test schema-7.10b {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><a/></b><c/></doc> errMsg]
    grammar delete
    set result
} 0

test schema-7.10c {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [catch {
        set doc [dom parse -validateCmd grammar <doc><a/></b><c/></doc>]
    }]
    grammar delete
    set result
} 1

test schema-7.11 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc><c/></doc>
        <doc><a/><b/><c/></doc>
        <doc><a/><b/><a/><b/><c/></doc>
        <doc><a/><b/><a/><b/></doc>
    } {
        lappend result [grammar validate $xml]
    }
    grammar delete
    set result
} {1 1 1 0}

test schema-7.12 {loop over seq} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><c/></doc> errMsg]
    lappend result [grammar validate <doc><a/><b/><c/><d/></doc>]
    lappend result [grammar validate <doc><a/><b/><c/></doc>]
    lappend result [grammar validate <doc><a/><b/><a/><b/><c/></doc>]
    lappend result [grammar validate <doc><a/><b/></doc>]
    grammar delete
    set result
} {0 0 1 0 0}

test schema-7.13 {long sequence} {
    tdom::schema create s
    s define {
        defelement doc {
            for {set i 1} {$i < 200} {incr i} {
                element e$i
            }
        }
        for {set i 1} {$i < 200} {incr i} {
            defelement e$i {element a}
        }
        defelement a {}
    }
    set xml "<doc>"
    for {set i 1} {$i < 200} {incr i} {
        append xml "<e$i><a/></e$i>"
    }
    append xml "</doc>"
    set result [s validate $xml]
    s delete
    set result
} 1


test schema-7.14 {mixed} {
    tdom::schema create s
    s define {
        defelement doc {
            mixed {
                element a
                element b
            }
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc></doc>
        <doc>text</doc>
        <doc>text<a/></doc>
        <doc><a/></doc>
        <doc>some<a/><b/></doc>
        <doc>some<a/><unknown/><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 1 1 0}

test schema-7.14a {mixed} {
    tdom::schema create s
    s define {
        defelement doc {
            mixed ! {
                element a
                element b
            }
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc>text</doc>
        <doc>text<a/></doc>
        <doc><a/></doc>
        {<doc><b/>to much</doc>}
        <doc>some<a/><b/></doc>
        <doc><unknown/><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 1 0 0 0}

test schema-7.14b {mixed} {
    tdom::schema create s
    s define {
        defelement doc {
            mixed ! {
                element a *
                element b
            }
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc>text</doc>
        <doc>text<a/></doc>
        <doc><a/></doc>
        <doc><a/><a/><a/></doc>
        <doc><b/></doc>
        {<doc><b/>to much</doc>}
        <doc><b/><b/></doc>
        <doc>some<a/><b/></doc>
        <doc><unknown/><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 1 1 1 0 0 0 0}

test schema-7.15 {choice with optional choices} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a *
                element b *
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><a/></doc>
        <doc><a/><a/><a/><c/></doc>
        <doc><b/><b/><b/><c/></doc>
        <doc><c/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {0 0 1 0 1 1 1}

test schema-7.15a {choice with optional choices} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a *
                element b *
            }
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><a/></doc>
        <doc><a/><a/><a/><c/></doc>
        <doc><b/><b/><b/><c/></doc>
        <doc><b/><b/><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {1 1 0 1 0 0 1}

test schema-7.15b {choice with optional choices} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a *
                element b
            }
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><a/></doc>
        <doc><a/><a/><a/><c/></doc>
        <doc><b/><b/><b/><c/></doc>
        <doc><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {1 1 0 1 0 0 1}

test schema-7.16 {choice with optional choices} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a *
                group * {
                    element aa
                    element ab ?
                }
            }
            element c
        }
        foreach e {a aa ab c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><a/></doc>
        <doc><a/><a/><a/><c/></doc>
        <doc><aa/><c/></doc>
        <doc><aa/><ab/><aa/><c/></doc>
        <doc><aa/><ab/><aa/><aa/><ab/><c/></doc>
        <doc><c/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {0 0 1 0 1 1 1 1 1}

test schema-7.17 {choice with optional choices} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a *
                group {
                    element aa
                    element ab ?
                }
            }
            element c
        }
        foreach e {a aa ab c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><a/></doc>
        <doc><a/><a/><a/><c/></doc>
        <doc><aa/><c/></doc>
        <doc><aa/><ab/><aa/><c/></doc>
        <doc><aa/><ab/><aa/><aa/><ab/><c/></doc>
        <doc><c/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {0 0 1 0 1 1 0 0 1}

test schema-7.18 {choice} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a
                group {
                    element aa
                    element ab ?
                }
            }
            element c
        }
        foreach e {a aa ab c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><a/></doc>
        <doc><a/><a/><a/><c/></doc>
        <doc><aa/><c/></doc>
        <doc><aa/><ab/><aa/><c/></doc>
        <doc><aa/><ab/><aa/><aa/><ab/><c/></doc>
        <doc><c/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {0 0 1 0 0 1 0 0 0}

        # <doc/>
        # <doc><a/></doc>
        # <doc><a/><c/></doc>
        # <doc><a/><a/><c/></doc>
        # <doc><a/><a/></doc>
        # <doc><a/><a/><a/></doc>
        # <doc><a/><a/><a/><c/></doc>
        # <doc><aa/><c/></doc>
        # <doc><aa/><ab/><aa/><c/></doc>
        # <doc><aa/><ab/><aa/><aa/><ab/><c/></doc>
        # <doc><c/></doc>

test schema-7.19 {choice with quantified choice} {
    tdom::schema create s
    s define {
        defelement doc {
            choice {
                element a {0 2}
                group {
                    element aa
                    element ab ?
                }
            }
            element c
        }
        foreach e {a aa ab c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><c/></doc>
        <doc><a/><a/></doc>
        <doc><a/><a/><a/></doc>
        <doc><a/><a/><a/><c/></doc>
        <doc><aa/><c/></doc>
        <doc><aa/><ab/><aa/><c/></doc>
        <doc><aa/><ab/><aa/><aa/><ab/><c/></doc>
        <doc><c/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {0 0 1 1 0 0 0 1 0 0 1}

test schema-7.20 {group with only optional content} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            group {
                element b ?
                element c ?
            }
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/></doc>
        <doc><a/><c/></doc>
        <doc><a/><a/><c/></doc>
        <doc><a/><b/></doc>
        <doc><a/><b/><c/></doc>
    } {
        lappend result [s validate $xml]
    }
    set result
} {0 1 1 0 1 1}

test schema-8.1 {validate method} {
    tdom::schema create grammar
    grammar defelement doc {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e {}
    }
    set result [grammar validate <doc><e1/></doc>]
    lappend result [grammar validate <doc><e1/><e1/></doc> errMsg]
    lappend result [grammar validate <doc><e1/><e2/></doc> errMsg]
    lappend result [grammar validate <doc><e1/><e2/><e2/><e2/></doc> errMsg]
    lappend result [grammar validate <doc><e1/><e2/><e2/><e1/></doc> errMsg]
    grammar delete
    set result
} {1 0 1 1 0}

test schema-8.2 {validate method} {
    tdom::schema create grammar
    grammar defelement doc foouri {
        element e1
        element e2 *
    }
    foreach e {e1 e2} {
        grammar defelement $e foouri {}
    }
    set result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>} errMsg]
    grammar delete
    set result
} {1 0}

test schema-8.3 {validate method: white space between elements} {
    tdom::schema create grammar
    grammar define {
        defpattern a  {
            group {
                element e1
                element e1 1 {
                    element e2
                }
                element e2
            }
            element e3 ?
        }
        defpattern b  {
            element b1 *
            group 2 {
                element b2
                ref a
            }
        }
        foreach e {e1 e2 e3 b1 b2} {
            defelement $e  {}
        }
        defelement doc  {
            group {
                ref b
            }
        }
    }
    set result [grammar validate {
         <doc>
           <!-- ref b start -->
           <b2/>
           <!-- inside ref b: ref a start -->
           <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- inside ref b: ref a start -->
        <b2/>
        <e1/>
           <e1>
             <e2/>
           </e1>
           <e2/>
           <e3/>
           <!-- inside ref b: ref a end -->
           <!-- ref b end -->
         </doc>
    } msg]
    grammar delete
    set result
} 1

test schema-8.4 {illegal text} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><a/><b/>wrong<c/></doc> errMsg]
    grammar delete
    set result
} 0

test schema-8.5 {illegal text - expat not signaling XML_STATUS_SUSPENDED although XML_StopParser() was called in handler, again.} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            group * {
                element a
                element b
            }
            element c
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [grammar validate <doc><a/><b/>wrong<c/></doc> errMsg]
    grammar delete
    set result
} 0

test schema-8.6 {} {
    tdom::schema create s
    s define {
        defelement doc {}
    }
    set result [s validate <doc/>]
    lappend result [s validate <wrong/>]
    s start mydoc
    lappend result [s validate <doc/>]
    s delete
    set result
} {1 0 0}

test schema-9.1 {choice} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            choice * {
                element e1
                element e2
            }
        }
        foreach e {e1 e2} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {1 1 1 1 1 1}

test schema-9.2 {group} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            group {
                element e1
                element e2 *
            }
        }
        foreach e {e1 e2} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/><e2/><e1/><e2/><e2/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {0 1 0 0 0 0 1}

test schema-9.3 {choice} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            choice * {
                element e1
                group {
                    element e2
                    element e3
                }
            }
        }
        foreach e {e1 e2} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e3/><e2/><e3/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {1 1 1 1 1 1 0}

test schema-9.4 {choice} {
    tdom::schema create grammar
    grammar define {
        defelement doc foouri {
            choice 2 {
                element e1
                group {
                    element e2
                    element e3
                }
            }
        }
        foreach e {e1 e2 e3} {
            defelement $e foouri {}
        }
    }
    set result [grammar validate {<doc xmlns="foouri"/>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e1/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e2/><e3/><e2/><e3/></doc>}]
    lappend result [grammar validate {<doc xmlns="foouri"><e1/><e2/><e2/></doc>}]
    grammar delete
    set result
} {0 0 0 1 1 1 1 0}

test schema-9.5 {choice as choice child} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            choice {
                element e1
                element e2
                choice {
                    element e2
                    element e3
                }
            }
        }
        foreach e {e1 e2 e3} {
            defelement $e foouri {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><e1/></doc>
        <doc><e2/><e3/></doc>
        <doc><e2/></doc>
        <doc><e3/></doc>
        <doc><e4></doc>
    } {
        lappend result [grammar validate $xml]
    }
    grammar delete
    set result
} {0 1 0 1 1 0}

test schema-9.6 {mixed as choice child} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            choice {
                element e1
                element e2
                mixed {
                    element e2
                    element e3
                }
            }
        }
        foreach e {e1 e2 e3} {
            defelement $e foouri {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e1/></doc>}
        {<doc><e2/><e3/></doc>}
        {<doc><e2/></doc>}
        {<doc><e3/></doc>}
        {<doc><e4></doc>}
    } {
        lappend result [grammar validate $xml]
    }
    grammar delete
    set result
} {1 1 0 1 1 0}

test schema-9.7 {choice as mixed child} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            mixed {
                element e1
                element e2
                choice {
                    element e2
                    element e3
                }
            }
        }
        foreach e {e1 e2 e3} {
            defelement $e foouri {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e1/></doc>}
        {<doc><e2/><e3/></doc>}
        {<doc><e2/></doc>}
        {<doc><e3/></doc>}
        {<doc><e4></doc>}
    } {
        lappend result [grammar validate $xml]
    }
    grammar delete
    set result
} {1 1 1 1 1 0}

test schema-9.8 {choice as choice child} {
    tdom::schema create grammar
    grammar define {
        defelement doc {
            choice {
                element e1
                element e2
                choice 2 {
                    element e3
                    element e4
                }
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e1/></doc>}
        {<doc><e2/><e3/></doc>}
        {<doc><e2/></doc>}
        {<doc><e3/><e3/></doc>}
        {<doc><e4/><e3/></doc>}
        {<doc><e4></doc>}
    } {
        lappend result [grammar validate $xml]
    }
    grammar delete
    set result
} {0 1 0 1 1 1 0}

test schema-10.1 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [list]
    foreach xml {
        <doc><a/><something/><b/></doc>
        <doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1}            

test schema-10.2 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any 1
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [s validate {<doc><a/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><something/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><b/></doc>}]
    lappend result [s validate {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}]
    s delete
    set result
} {1 0 0 1}

test schema-10.3 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any ?
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [s validate {<doc><a/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><something/><something/><b/></doc>}]
    lappend result [s validate {<doc><a/><b/></doc>}]
    lappend result [s validate {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}]
    s delete
    set result
} {1 0 0 1}

test schema-10.4 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any 2
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [list]
    foreach xml {
        {<doc><a/><something/><b/></doc>}
        {<doc><a/><something/><something/><b/></doc>}
        {<doc><a/><b/></doc>}
        {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 0 0}

test schema-10.5 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            element a
            any http://foo.bar 2
            element b
        }
        defelement a {}
        defelement b {}
    }
    set result [list]
    foreach xml {
        {<doc><a/><something/><b/></doc>}
        {<doc><a/><something/><something/><b/></doc>}
        {<doc><a/><b/></doc>}
        {<doc><a/><a><b>text</b><c><c><c/></c></c></a><b/></doc>}
        {<doc xmlns:ns="http://foo.bar"><a/><ns:a/><ns:b>some</ns:b><b/></doc>}
        {<doc xmlns:ns="http://foo.bar" xmlns:ns1="http://foo.bar"><a/><ns1:a/><ns:b>some</ns:b><b/></doc>}
        {<doc xmlns:ns="http://foo.bar" xmlns:ns1="http://foo.grill"><a/><ns1:a/><ns:b>some</ns:b><b/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 1 1 0}

test schema-10.6 {any} {
    tdom::schema create s
    s define {
        defelement doc {
            any
        }
    }
    set result [list]
    foreach xml {
        {<doc><a:some xmlns:a="uri"/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1}

test schema-11.1 {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            attribute attr1
            attribute attr2 ?
        }
    }
    set result [s validate {<doc attr1="foo" attr2="bar"/>}]
    lappend result [s validate {<doc attr1="foo"/>}]
    lappend result [s validate {<doc attr2="bar"/>}]
    lappend result [s validate {<doc attr1="foo" attr2="bar" unknownAtt="grill"/>}]
    s delete
    set result
} {1 1 0 0}

test schema-11.1a {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            attribute attr1
            attribute attr2 ?
        }
    }
    set result [list]
    foreach xml {
        {<doc attr1="foo" attr2="bar"/>}
        {<doc attr1="foo"/>}
        {<doc attr2="bar"/>}
        {<doc attr1="foo" attr2="bar" unknownAtt="grill"/>}
    } {
        lappend result [catch {set doc [dom parse -validateCmd s $xml]} errMsg]
        catch {$doc delete}
        s reset
    }
    s delete
    set result
} {0 0 1 1}

test schema-11.1b {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            attribute attr1
            attribute attr2 ?
        }
    }
    ::xml::parser p -validateCmd s    
    set result [list]
    foreach xml {
        {<doc attr1="foo" attr2="bar"/>}
        {<doc attr1="foo"/>}
        {<doc attr2="bar"/>}
        {<doc attr1="foo" attr2="bar" unknownAtt="grill"/>}
    } {
        lappend result [catch {p parse $xml} errMsg]
        p reset
        s reset
    }
    s delete
    p delete
    set result
} {0 0 1 1}

test schema-11.2 {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            element e 1 {
                attribute attr3 ?
                attribute attr4 !
            }
            attribute attr2 ?
        }
    }
    set result [s validate {<e attr1="attr1" attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}]
    lappend result [s validate {<e attr1="attr1"><e attr3="attr3" attr4="attr4"/></e>}]
    lappend result [s validate {<e attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}]
    lappend result [s validate {<e attr1="attr1"><e attr4="attr4"/></e>}]
    lappend result [s validate {<e attr1="attr1"><e attr3="attr3"/></e>}]
    s delete
    set result
} {1 1 0 1 0}

test schema-11.2a {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            element e 1 {
                attribute attr3 ?
                attribute attr4 !
            }
            attribute attr2 ?
        }
    }
    set result [list]
    foreach xml {
        {<e attr1="attr1" attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3"/></e>}
    } {
        lappend result [catch {set doc [dom parse -validateCmd s $xml]} errMsg]
        catch {$doc delete}
        s reset
    }
    s delete
    set result
} {0 0 1 0 1}

test schema-11.2b {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            element e 1 {
                attribute attr3 ?
                attribute attr4 !
            }
            attribute attr2 ?
        }
    }
    ::xml::parser p -validateCmd s    
    set result [list]
    foreach xml {
        {<e attr1="attr1" attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr2="attr2"><e attr3="attr3" attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr4="attr4"/></e>}
        {<e attr1="attr1"><e attr3="attr3"/></e>}
    } {
        lappend result [catch {p parse $xml} errMsg]
        p reset
        s reset
    }
    p delete
    s delete
    set result
} {0 0 1 0 1}

test schema-11.3 {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            attribute attr3 ?
            attribute attr4 !
            attribute attr2 ?
        }
    }
    set result [s validate <e/> errMsg]
    lappend result $errMsg
    s delete
    set result
} {0 {error "Missing mandatory attribute(s): attr1 attr4" at line 1 character 4}}

test schema-11.3a {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            attribute attr3 ?
            attribute attr4 !
            attribute attr2 ?
        }
    }
    set result [catch {dom parse -validateCmd s <e/>} errMsg]
    lappend result $errMsg
    s delete
    set result
} {1 {Missing mandatory attribute(s): attr1 attr4, referenced at line 1 character 4}}

test schema-11.3b {attribute} {
    tdom::schema create s
    s define {
        defelement e {
            attribute attr1
            attribute attr3 ?
            attribute attr4 !
            attribute attr2 ?
        }
    }
    ::xml::parser p -validateCmd s    
    set result [catch {p parse <e/>} errMsg]
    lappend result $errMsg
    p delete
    s delete
    set result
} {1 {Missing mandatory attribute(s): attr1 attr4}}

test schema-11.4 {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace ?
            }
        }
    }
    set result [s validate {<doc><e foo="bar"/></doc>} errMsg]
    s delete
    lappend result $errMsg
} {1 {}}

test schema-11.4_1 {attribute} {
    tdom::schema create s
    s prefixns {1 http://www.w3.org/XML/1998/namespace}
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang 1 ?
            }
        }
    }
    set result [s validate {<doc><e foo="bar"/></doc>} errMsg]
    s delete
    lappend result $errMsg
} {1 {}}

test schema-11.4a {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace ?
            }
        }
    }
    set result [catch {set doc [dom parse -validateCmd s {<doc><e foo="bar"/></doc>}]}]
    s delete
    $doc delete
    set result
} 0

test schema-11.4b {attribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace
            }
        }
    }
    set result [s validate {<doc><e xml:lang="en" foo="bar"/></doc>} errMsg]
    s delete
    lappend result $errMsg
} {1 {}}

test schema-11.5 {nsattribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace ?
            }
        }
    }
    set result [catch {set doc [dom parse -validateCmd s {<doc><e xml:lang="en" foo="bar"/></doc>}]}]
    s delete
    $doc delete
    set result
} 0

test schema-11.5a {nsattribute} {
    tdom::schema create s
    s prefixns {ns1 http://www.w3.org/XML/1998/namespace}
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang ns1 ?
            }
        }
    }
    set result [catch {set doc [dom parse -validateCmd s {<doc><e xml:lang="en" foo="bar"/></doc>}]}]
    s delete
    $doc delete
    set result
} 0

test schema-11.6 {nsattribute} {
    tdom::schema create s
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang http://www.w3.org/XML/1998/namespace
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><e foo="bar"/></doc>}
        {<doc><e xml:lang="en"/></doc>}
        {<doc><e unknown="some"/></doc>}
        {<doc><e/></doc>}
    } {
        lappend result [catch {set doc [dom parse -validateCmd s $xml]} errMsg]
        lappend result $errMsg
        s reset
    }
    s delete
    set result
} {1 {Missing mandatory attribute(s): http://www.w3.org/XML/1998/namespace:lang, referenced at line 1 character 19} 1 {Missing mandatory attribute(s): foo, referenced at line 1 character 23} 1 {Unknown attribute "unknown", referenced at line 1 character 24} 1 {Missing mandatory attribute(s): foo http://www.w3.org/XML/1998/namespace:lang, referenced at line 1 character 9}}

test schema-11.6 {nsattribute} {
    tdom::schema create s
    s prefixns {ns1 http://www.w3.org/XML/1998/namespace}
    s define {
        defelement doc {
            element e 1 {
                attribute foo
                nsattribute lang ns1
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><e foo="bar"/></doc>}
        {<doc><e xml:lang="en"/></doc>}
        {<doc><e unknown="some"/></doc>}
        {<doc><e/></doc>}
    } {
        lappend result [catch {set doc [dom parse -validateCmd s $xml]} errMsg]
        lappend result $errMsg
        s reset
    }
    s delete
    set result
} {1 {Missing mandatory attribute(s): http://www.w3.org/XML/1998/namespace:lang, referenced at line 1 character 19} 1 {Missing mandatory attribute(s): foo, referenced at line 1 character 23} 1 {Unknown attribute "unknown", referenced at line 1 character 24} 1 {Missing mandatory attribute(s): foo http://www.w3.org/XML/1998/namespace:lang, referenced at line 1 character 9}}

test schema-12.1 {domvalidate} {
    tdom::schema s 
    s define {
        defelement addressBook {
            element card *
        }
        defelement card {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e {text}
        }
    }
    set doc [dom parse {
<addressBook>
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
  </card>
</addressBook>        
    }]
    set result [s domvalidate $doc]
    lappend result [s domvalidate [$doc documentElement]]
    lappend result [s domvalidate [[$doc documentElement] firstChild]]
    lappend result [s domvalidate [[[$doc documentElement] firstChild] firstChild]]
    $doc delete
    s delete
    set result
} {1 1 1 1}

test schema-12.2 {domvalidate} {
    tdom::schema s 
    s define {
        defelement addressBook {
            element card *
        }
        defelement card {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e {text}
        }
    }
    set doc [dom parse {
<addressBook>
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
    <some>John Smith</some>
  </card>
</addressBook>        
    }]
    set result [s domvalidate $doc errMsg]
    lappend result $errMsg
    $doc delete
    s delete
    set result
} {0 {Unexpected child element "some" for element "some"}}

test schema-12.3 {domvalidate w/ attribute} {
    tdom::schema s
    s define {
        defelement doc {
            attribute type {fixed "1.2"}
            element a
            element b
        }
        foreach e {a b} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        {<doc type="1.2"><a/><b/></doc>}
        {<doc type="foo"><a/><b/></doc>}
        {<doc><a/><b/></doc>}
        {<doc type="1.2" another=""><a/><b/></doc>}
        {<doc type="1.2"><a something="else"/><b/></doc>}
    } {
        set doc [dom parse $xml]
        lappend result [s domvalidate [$doc documentElement]]
        lappend result [s validate $xml]
        $doc delete
    }
    s delete
    set result
} {1 1 0 0 0 0 0 0 0 0}

test schema-12.4 {domvalidate w/ text} {
    tdom::schema s
    s define {
        defelement doc {
            attribute type {fixed "1.2"}
            element a
            element b
        }
        foreach e {a b} {
            defelement $e text
        }
    }
    set result [list]
    foreach xml {
        {<doc type="1.2"><a/><b/></doc>}
        {<doc type="1.2"><a>content</a><b/></doc>}
        {<doc type="1.2"><a>content</a><b>some text</b></doc>}
        {<doc type="1.2">text<a>content</a><b>some text</b></doc>}
        {<doc type="1.2"><a><b/></a><b>some text</b></doc>}
    } {
        set doc [dom parse $xml]
        lappend result [s domvalidate [$doc documentElement]]
        lappend result [s validate $xml]
        $doc delete
    }
    s delete
    set result
} {1 1 1 1 1 1 0 0 0 0}

test schema-12.5 {domvalidate doch w/ xml namespace} {
    tdom::schema s 
    s define {
        defelement addressBook http://foo.bar {
            element card *
        }
        defelement card http://foo.bar {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e http://foo.bar {text}
        }
    }
    set doc [dom parse {
<addressBook xmlns="http://foo.bar">
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
  </card>
</addressBook>        
    }]
    set result [s domvalidate $doc]
    lappend result [s domvalidate [$doc documentElement]]
    lappend result [s domvalidate [[$doc documentElement] firstChild]]
    lappend result [s domvalidate [[[$doc documentElement] firstChild] firstChild]]
    $doc delete
    set doc [dom parse {
<ns1:addressBook xmlns:ns1="http://foo.bar">
  <ns1:card>
    <ns1:name>John Smith</ns1:name>
    <ns1:email>js@example.com</ns1:email>
  </ns1:card>
  <ns1:card>
    <ns1:name>Fred Bloggs</ns1:name>
    <ns1:email>fb@example.net</ns1:email>
  </ns1:card>
</ns1:addressBook>        
}]
    lappend result [s domvalidate $doc]
    lappend result [s domvalidate [$doc documentElement]]
    lappend result [s domvalidate [[$doc documentElement] firstChild]]
    lappend result [s domvalidate [[[$doc documentElement] firstChild] firstChild]]
    $doc delete
    s delete
    set result
} {1 1 1 1 1 1 1 1}

test schema-12.5a {domvalidate doch w/ xml namespace} {
    tdom::schema s 
    s prefixns {fb http://foo.bar}
    s define {
        defelement addressBook fb {
            element card *
        }
        defelement card fb {
            element name
            element email
        }
        foreach e {name email} {
            defelement $e fb {text}
        }
    }
    set doc [dom parse {
<addressBook xmlns="http://foo.bar">
  <card>
    <name>John Smith</name>
    <email>js@example.com</email>
  </card>
  <card>
    <name>Fred Bloggs</name>
    <email>fb@example.net</email>
  </card>
</addressBook>        
    }]
    set result [s domvalidate $doc]
    lappend result [s domvalidate [$doc documentElement]]
    lappend result [s domvalidate [[$doc documentElement] firstChild]]
    lappend result [s domvalidate [[[$doc documentElement] firstChild] firstChild]]
    $doc delete
    set doc [dom parse {
<ns1:addressBook xmlns:ns1="http://foo.bar">
  <ns1:card>
    <ns1:name>John Smith</ns1:name>
    <ns1:email>js@example.com</ns1:email>
  </ns1:card>
  <ns1:card>
    <ns1:name>Fred Bloggs</ns1:name>
    <ns1:email>fb@example.net</ns1:email>
  </ns1:card>
</ns1:addressBook>        
}]
    lappend result [s domvalidate $doc]
    lappend result [s domvalidate [$doc documentElement]]
    lappend result [s domvalidate [[$doc documentElement] firstChild]]
    lappend result [s domvalidate [[[$doc documentElement] firstChild] firstChild]]
    $doc delete
    s delete
    set result
} {1 1 1 1 1 1 1 1}

test schema-13.1 {XML namespaces} {
    tdom::schema create s
    s defelement doc ns1 {
        # Forward defined element inherits child namespace
        element elm1
        element elm2
    }
    s defelement elm1 ns2 {}
    s defelement elm1 ns1 {
        choice {
            element fooElem
            element barElem +
        }
    }
    s defelement elm2 ns1 {}
    s defelement fooElem ns1 {}
    s defelement barElem ns1 {}
    set result [list]
    foreach xml {
        {<doc xmlns="ns1"><elm1><fooElem/></elm1></doc>}
        {<doc xmlns="ns1"><elm1><fooElem/></elm1><elm2/></doc>}
        {<n:doc xmlns:n="ns1"><n:elm1><n:fooElem/></n:elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns1"><n:fooElem/></elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns2"><n:fooElem/></elm1><n:elm2/></n:doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0}

test schema-13.2 {XML namespaces} {
    tdom::schema create s
    s defelement doc ns1 {
        namespace ns2 {
            element elm1
        }
        # Forward defined element inherits child namespace
        element elm2
    }
    s defelement elm1 ns2 {}
    s defelement elm1 ns1 {
        choice {
            element fooElem
            element barElem +
        }
    }
    s defelement elm2 ns1 {}
    s defelement fooElem ns1 {}
    s defelement barElem ns1 {}
    set result [list]
    foreach xml {
        {<doc xmlns="ns1"><elm1><fooElem/></elm1></doc>}
        {<doc xmlns="ns1"><elm1><fooElem/></elm1><elm2/></doc>}
        {<n:doc xmlns:n="ns1"><n:elm1><n:fooElem/></n:elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns1"><n:fooElem/></elm1><n:elm2/></n:doc>}
        {<n:doc xmlns:n="ns1"><elm1 xmlns="ns2"/><n:elm2/></n:doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 1}

test schema-14.1 {text: integer} {
    tdom::schema s
    s defelement doc {
        text {
            integer
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>5</doc>
        <doc>eeee</doc>
        <doc>56666</doc>
        {<doc>   </doc>}
        {<doc>  97  </doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 1 0 0}

test schema-14.1.1 {text: integer} {
    tdom::schema s
    s defelement doc {
        text {
            integer tcl
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>5</doc>
        <doc>eeee</doc>
        <doc>56666</doc>
        {<doc>   </doc>}
        {<doc>  +34 </doc>}
        {<doc>034</doc>}
        {<doc>0034 </doc>}
        {<doc>0xAB</doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 1 0 1 1 1 1}

test schema-14.1.2 {text: integer} {
    tdom::schema s
    s defelement doc {
        text {
            integer xsd
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>5</doc>
        <doc>eeee</doc>
        <doc>56666</doc>
        {<doc>   </doc>}
        {<doc>  +34 </doc>}
        {<doc>034</doc>}
        {<doc>0034 </doc>}
        {<doc>0xAB</doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 1 0 0 1 0 0}


proc proc-14.2 {param text} {
    if {$text in {one two tree}} {
        return true
    }
    return false
}

test schema-14.2 {text: tcl} {
    tdom::schema s
    s define {
        defelement doc {
            element a
            element b
        }
        defelement a {
            text {tcl string is lower -strict}
        }
        defelement b {
            text {tcl proc-14.2 foo}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b/></doc>
        <doc><a>abc</a><b>two</b></doc>
        <doc><a>aBc</a><b>two</b></doc>
        <doc><a>abc</a><b>four</b></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 0}

test schema-14.3 {attribute text: tcl} {
    tdom::schema s
    s define {
        defelement doc {
            element e 1 {
                attribute a ! {tcl string is lower -strict}
                attribute b ? {tcl proc-14.2 foo}
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><e a="abc" b="tree"/></doc>}
        {<doc><e a="aAc" b="tree"/></doc>}
        {<doc><e a="aa2c" b="tree"/></doc>}
        {<doc><e a="aaoiu"/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 0 1}

test schema-14.4 {text: fixed} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            attribute a ! {fixed enabled}
            text {fixed something}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e a="enabled">something</e></doc>}
        {<doc><e a="somehing">something</e></doc>}
        {<doc><e a="enabled">something else</e></doc>}
        {<doc><e a="enabled">something</e><e a="foo">something</e></doc>}
        {<doc><e a="enabled">something</e><e a="enabled">not</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 0 0 0 0}

test schema-14.5 {text: enumeration} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            attribute a {enumeration {enabled disabled}}
            text {enumeration {enabled disabled "a third"}}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e a="enabled">disabled</e></doc>}
        {<doc><e a="enabled">disabled</e><e a="disabled">a third</e></doc>}
        {<doc><e a="disabled">something</e></doc>}
        {<doc><e a="enabled">something else</e></doc>}
        {<doc><e a="enabled">enabled disabled</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0 0 0}

test schema-14.6 {text: match (glob style)} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            text {match {[a-zA-Z]*1[_!]}}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e>disabled1_</e></doc>}
        {<doc><e>dis able1_</e></doc>}
        {<doc><e>something</e></doc>}
        {<doc><e>a1!</e></doc>}
        {<doc><e>a1!/</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0 1 0}

test schema-14.6a {text: match (glob style) -nocase} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            text {match -nocase {[A-Z]*1[_!]}}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><e>disabled1_</e></doc>}
        {<doc><e>dis able1_</e></doc>}
        {<doc><e>something</e></doc>}
        {<doc><e>a1!</e></doc>}
        {<doc><e>a1!/</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0 1 0}

test schema-14.7 {text: regexp} {
    tdom::schema s
    s define {
        defelement doc {
            element e *
        }
        defelement e {
            text {regexp {^[a-zA-Z]*1[_!]$}}
        }
    }
    set result [list]
    foreach xml {
        {<doc><e>disabled1_</e></doc>}
        {<doc><e>dis able1_</e></doc>}
        {<doc><e>something</e></doc>}
        {<doc><e>a1!</e></doc>}
        {<doc><e>a1!/</e></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 0 1 0}

test schema-14.8 {text: nmtoken, nmtokens} {
    tdom::schema s
    s define {
        defelement doc {
            attribute a {nmtoken}
            attribute b {nmtokens}
            attribute c ?
        }
    }
    set result [list]
    foreach xml {
        {<doc a="foo" b="foo" c="something"/>}
        {<doc a="foo" b="foo bar"/>}
        {<doc a=".foo" b="f2o" c="something"/>}
        {<doc a=":foo" b="fo:o b2/ar"/>}
        {<doc b="foo bar"/>}
        {<doc a="foo" b="  foo    bar  "/>}
        {<doc a="  foo  " b="foo bar"/>}
        {<doc a="foo " b="foo bar"/>}
        {<doc a=" foo" b="foo bar"/>}
        {<doc a="foo" b=" foo bar"/>}
        {<doc a="foo" b="foo  bar"/>}
        {<doc a="foo" b="foo bar "/>}
        {<doc a="foo bar" b="foo bar"/>}
        {<doc a="f&#xd7;o" b="foo bar"/>}
        {<doc a="foo" b="foo b&#xf7;r"/>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0 0 1 1 1 1 1 1 1 0 0 0}

test schema-14.9 {text: isodate} {
    tdom::schema s
    s define {
        defelement doc {
            text isodate
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>1234-14-31</doc>
        <doc>1234-12-00</doc>
        <doc>1234-02-31</doc>
        <doc>2000-02-29</doc>
        <doc>2001-02-29</doc>
        <doc>2004-02-29</doc>
        <doc>-2004-02-29</doc>
        <doc>1900-02-29</doc>
        <doc>1234-02-01</doc>
        <doc>1234-08-10</doc>
        <doc>1234-08-222</doc>
        {<doc> 1234-08-22</doc>}
        {<doc>1234-08-22 </doc>}
        <doc>11234-08-22</doc>
        <doc>0000-02-01</doc>
        <doc>10000-08-22</doc>
        <doc>10000-02-29</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 0 1 0 0 0 1 0 1 1 0 1 1 0 0 0 1 0 1 1}

test schema-14.10 {text: number} {
    tdom::schema s
    s define {
        defelement doc {
            text number
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>.777</doc>
        <doc>-1.2e5</doc>
        {<doc> -1.2e5 </doc>}
        {<doc> -1.2e5 e</doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 1 1 0 1 1 1 1 0}

test schema-14.11 {text: maxLength} {
    tdom::schema s
    s define {
        defelement doc {
            text {
                maxLength 6
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;&#x1234;&#x1F46E;</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 1 1 0 1 1 0}

test schema-14.12 {text: maxLength} {
    tdom::schema s
    s define {
        defelement doc {
            text {minLength 6}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;&#x1234;&#x1F46E;</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 0 1 1 0 1 1}

test schema-14.13 {text: two constraints} {
    tdom::schema s
    s define {
        defelement doc {
            text {
                minLength 6
                maxLength 8
            }
        }
    }
    set result [list]
    foreach xml {
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;&#x1234;&#x1F46E;</doc>
        <doc>1234567890</doc>
        <doc>12345678901234567890</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 1 0 1 1 0 0}

test schema-14.14 {text: one of two types} {
    tdom::schema s
    s define {
        defelement doc {
            choice {
                text {
                    minLength 1
                    maxLength 3
                }
                text {isodate}
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>1234-12</doc>
        <doc>12345678901234567890</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 1 1 1 0 0 0 0}

test schema-14.15 {text: oneOf} {
    tdom::schema s
    s define {
        defelement doc {
            text {
                oneOf {
                    maxLength 3
                    isodate
                }
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>1234-12</doc>
        <doc>12345678901234567890</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 1 1 1 0 0 0 0}

test schema-14.16 {text: oneOf} {
    tdom::schema s
    s define {
        defelement doc {
            text {
                minLength 1
                oneOf {
                    maxLength 3
                    isodate
                }
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>1234-12</doc>
        <doc>12345678901234567890</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 1 1 1 0 0 0 0}

test schema-14.17 {text: oneOf w/ allOf} {
    tdom::schema s
    s define {
        defelement doc {
            text {
                minLength 1
                oneOf {
                    allOf {
                        maxLength 3
                        minLength 1
                    }
                    isodate                    
                }
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>foo</doc>
        <doc>1</doc>
        <doc>12</doc>
        <doc>1234-12-31</doc>
        <doc>-14.23</doc>
        <doc>&#x1F46E;&#x1234;&#x1234;&#x1234;&#x1234;</doc>
        <doc>1234-12</doc>
        <doc>12345678901234567890</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 1 1 1 0 0 0 0}

test schema-14.18 {deftext} {
    tdom::schema s
    s deftext len2-4 {
        minLength 2
        maxLength 4
    }
    s defelement doc {
         element e ! {text type len2-4}
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><e/></doc>
        <doc><e></e></doc>
        {<doc><e> </e></doc>}
        {<doc><e>1</e></doc>}
        {<doc><e>12</e></doc>}
        {<doc><e>  </e></doc>}
        {<doc><e>123</e></doc>}
        {<doc><e>1234</e></doc>}
        {<doc><e>1234 </e></doc>}
        {<doc><e>12345</e></doc>}
        {<doc><e>123&#x1234;</e></doc>}
    } {
        lappend result [s validate $xml]
        set rc [catch {dom parse -validateCmd s $xml doc}]
        if {$rc == 0} {
            $doc delete
        }
        lappend result $rc
    }
    s delete
    set result
} {0 1 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 0 0 1 0 1 1 0}

test schema-14.19 {deftext} {
    tdom::schema s
    s deftext len2-4 {
        minLength 2
        maxLength 4
    }
    s defelement doc {
        element e
    }
    s defelement e {
        attribute this type len2-4
        attribute foo ? type len2-4
    }
    set result [list]
    foreach xml {
        <doc><e/></doc>
        {<doc><e foo="bar"/></doc>}
        {<doc><e this="bar"/></doc>}
        {<doc><e this=""/></doc>}
        {<doc><e this="12" foo="bar"/></doc>}
        {<doc><e this="12" foo="b"/></doc>}
        {<doc><e this="1234"/></doc>}
        {<doc><e this="12345"/></doc>}
        {<doc><e this="12345alkajsdlfjkals" and="this"/></doc>}
        {<doc><e and="this" this="12345alkajsdlfjkals"/></doc>}
    } {
        lappend result [s validate $xml errMsg]
        set rc [catch {dom parse -validateCmd s $xml doc}]
        if {$rc == 0} {
            $doc delete
        }
        lappend result $rc
    }
    s delete
    set result
} {0 1 0 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1}

test schema-14.19a {deftext} {
    tdom::schema s
    s deftext len2-4 {
        minLength 2
        maxLength 4
    }
    s defelement doc {
        element e ! {
            attribute this type len2-4
            attribute foo ? type len2-4
        }
    }
    set result [list]
    foreach xml {
        <doc><e/></doc>
        {<doc><e foo="bar"/></doc>}
        {<doc><e this="bar"/></doc>}
        {<doc><e this=""/></doc>}
        {<doc><e this="12" foo="bar"/></doc>}
        {<doc><e this="12" foo="b"/></doc>}
        {<doc><e this="1234"/></doc>}
        {<doc><e this="12345"/></doc>}
        {<doc><e this="12345alkajsdlfjkals" and="this"/></doc>}
        {<doc><e and="this" this="12345alkajsdlfjkals"/></doc>}
    } {
        lappend result [s validate $xml]
        set rc [catch {dom parse -validateCmd s $xml doc}]
        if {$rc == 0} {
            $doc delete
        }
        lappend result $rc
    }
    s delete
    set result
} {0 1 0 1 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1}

test schema-14.20 {deftext} {
    tdom::schema s
    s deftext len2-4 {
        minLength 2
        maxLength 4
    }
    s defelement doc {
        element e ! {
            nsattribute this http://tdom.org/test {
                minLength 2
                maxLength 4
            }
            nsattribute foo http://tdom.org/test ? type len2-4
        }
    }
    set result [list]
    foreach xml {
        <doc><e/></doc>
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:foo="bar"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="bar"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this=""/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12" ns1:foo="bar"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12" ns1:foo="b"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="1234"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12345"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12345alkajsdlfjkals" ns1:and="this"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:and="this" ns1:this="12345alkajsdlfjkals"/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 1 0 1 0 0 0}

test schema-14.20a {deftext} {
    tdom::schema s
    s deftext len2-4 {
        minLength 2
        maxLength 4
    }
    s define {
        prefixns {
            ns2 http://tdom.org/test
            nsfoo http://foo.bar
            ns2 http://baz.boo
        }
        defelement doc {
            element e ! {
                nsattribute this ns2 {
                    minLength 2
                    maxLength 4
                }
                nsattribute foo ns2 ? type len2-4
            }
        }
    }
    set result [list]
    foreach xml {
        <doc><e/></doc>
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:foo="bar"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="bar"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this=""/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12" ns1:foo="bar"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12" ns1:foo="b"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="1234"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12345"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:this="12345alkajsdlfjkals" ns1:and="this"/></doc>}
        {<doc xmlns:ns1="http://tdom.org/test"><e ns1:and="this" ns1:this="12345alkajsdlfjkals"/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 1 0 1 0 1 0 0 0}

test schema-14.21 {strip} {
    tdom::schema s
    s define {
        defelement a {
            text {
                strip {
                    minLength 3
                    maxLength 5
                }
            }
        }
    }
    set result [list]
    foreach xml {
        <a/>
        <a></a>
        {<a> </a>}
        {<a>  3  </a>}
        {<a>123</a>}
        {<a> 123    </a>}
        {<a>  123   </a>}
        {<a>1234</a>}
        {<a>12345</a>}
        {<a>123456</a>}
        {<a> 12 34 </a>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 1 1 1 1 1 0 1}

test schema-14.22 {split} {
    tdom::schema s
    s define {
        defelement doc {
            element a 1 {
                text {
                    split {
                        number
                    }
                }
            }
        }
    }
    set result [list]
    foreach xml {
        <doc><a/></doc>
        <doc><a></a></doc>
        {<doc><a>  </a></doc>}
        {<doc><a>1</a></doc>}
        {<doc><a>-2.1</a></doc>}
        {<doc><a> -2.1
            </a></doc>}
        {<doc><a>-a</a></doc>}
        {<doc><a>-a b c</a></doc>}
        {<doc><a> 1   2 3.5</a></doc>}
        {<doc><a>  1   a 3.5</a></doc>}
        {<doc><a>1 2 fooo</a></doc>}
        {<doc><a>1 2 fooo   </a></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 1 1 1 0 0 1 0 0 0}

proc schema-14.23 {text} {
    return [split $text]
}

test schema-14.23 {split} {
    tdom::schema s
    s define {
        defelement doc {
            element a 1 {
                text {
                    split tcl schema-14.23 {
                        number
                    }
                }
            }
        }
    }
    set result [list]
    foreach xml {
        <doc><a/></doc>
        <doc><a></a></doc>
        {<doc><a>  </a></doc>}
        {<doc><a>1</a></doc>}
        {<doc><a>-2.1</a></doc>}
        {<doc><a> -2.1
            </a></doc>}
        {<doc><a>-a</a></doc>}
        {<doc><a>-a b c</a></doc>}
        {<doc><a>1   2 3.5</a></doc>}
        {<doc><a> 1   a 3.5</a></doc>}
        {<doc><a>1 2 fooo</a></doc>}
        {<doc><a>1 2 3 -4.5</a></doc>}
    } {
        lappend result [s validate $xml errMsg]
    }
    s delete
    set result
} {0 0 0 1 1 0 0 0 0 0 0 1}

proc schema-14.24 {text} {
    global schema-14.24
    switch ${schema-14.24} {
        1 {return {1 2 3}}
        2 {return {-23.4 .5}}
        3 {return {0 a 5}}
        default {error "Unexpected value of the global var schema-14.24."}
    }
}

test schema-14.24 {split} {
    set schema-14.24 0
    tdom::schema s
    s define {
        defelement doc {
            element a 1 {
                text {
                    split tcl schema-14.24 {
                        number
                    }
                }
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><a>  </a></doc>}
        {<doc><a>-a</a></doc>}
        {<doc><a>1 2 3 -4.5</a></doc>}
    } {
        incr schema-14.24
        lappend result [s validate $xml errMsg]
    }
    s delete
    set result
} {1 1 0}

proc schema-14.24a {arg1 arg2 text} {
    global schema-14.24a
    if {$arg1 ne "foo" || $arg2 ne "bar"} {
        error "Unexpected args"
    }
    switch ${schema-14.24a} {
        1 {return {1 2 3}}
        2 {return {-23.4 .5}}
        3 {return {0 a 5}}
        default {error "Unexpected value of the global var schema-14.24."}
    }
}

test schema-14.24a {split} {
    set schema-14.24a 0
    tdom::schema s
    s define {
        defelement doc {
            element a 1 {
                text {
                    split tcl schema-14.24a foo bar {
                        number
                    }
                }
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><a>  </a></doc>}
        {<doc><a>-a</a></doc>}
        {<doc><a>1 2 3 -4.5</a></doc>}
    } {
        incr schema-14.24a
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 0}

test schema-14.25 {element content id/idref} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element id *
                element idref *
            }
        }
        defelement id {text id}
        defelement idref {text idref}
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><id>abc</id></doc>
        <doc><idref>abc</idref></doc>
        <doc><id>abc</id><idref>abc</idref></doc>
        <doc><idref>abc</idref><id>abc</id></doc>
        <doc><idref>abc</idref><idref>abc</idref><id>abc</id></doc>
        <doc><id>abc</id><idref>abc</idref><idref>abc</idref></doc>
        {<doc><id>abc</id><idref>abc</idref><idref>ab c</idref></doc>}
        <doc><id>abc</id><idref>abc</idref><id>abc</id></doc>
        <doc><idref>abc</idref><idref>123</idref></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 0 1 1 1 1 0 0 0}

test schema-14.26 {attribute id/idref} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element id *
                element idref *
            }
        }
        defelement id {attribute id id}
        defelement idref {attribute idref idref}
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc><id id="abc"/></doc>}
        {<doc><idref idref="abc"/></doc>}
        {<doc><id id="abc"/><idref idref="abc"/></doc>}
        {<doc><idref idref="abc"/><id id="abc"/></doc>}
        {<doc><idref idref="abc"/><idref idref="abc"/><id id="abc"/></doc>}
        {<doc><id id="abc"/><idref idref="abc"/><idref idref="abc"/></doc>}
        {<doc><id id="abc"/><idref idref="abc"/><idref idref="ab c"/></doc>}
        {<doc><id id="abc"/><idref idref="abc"/><id id="abc"/></doc>}
        {<doc><idref idref="abc"/><idref idref="123"/></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 0 1 1 1 1 0 0 0}

test schema-14.27 {base64} {
    tdom::schema s
    s define {
        defelement doc {
            text base64
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        {<doc>ZVL1</doc>}        
        {<doc>zvL1</doc>}        
        {<doc>zvü1</doc>}        
        {<doc>0a BED   E+9</doc>}        
        {<doc>ub1sU3==</doc>}        
        {<doc>abc</doc>}        
        {<doc>===</doc>}        
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 1 0 1 1 0 0}

test schema-14.28 {element content id/idref} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element id *
                element idref *
                element ida *
                element idrefa *
            }
        }
        defelement id {text id}
        defelement idref {text idref}
        defelement ida {text {id a}}
        defelement idrefa {text {idref a}}
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><id>abc</id><ida>abc</ida></doc>
        <doc><idrefa>abc</idrefa></doc>
        <doc><idrefa>abc</idrefa><idref>abc</idref></doc>
        <doc><id>1</id><idrefa>abc</idrefa><idref>abc</idref><idrefa>foo</idrefa><idref>abc</idref></doc>
        <doc><id>abc</id><idref>abc</idref><ida>abc</ida><idrefa>abc</idrefa></doc>
        <doc><idref>abc</idref><id>abc</id><idrefa>abc</idrefa><ida>abc</ida></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 0 0 0 1 1}

test schema-14.29 {element content id/idref} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element id *
                element idref *
                element ida *
                element idrefa *
            }
        }
        defelement id {text {id b}}
        defelement idref {text {idref b}}
        defelement ida {text {id a}}
        defelement idrefa {text {idref a}}
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><id>abc</id><ida>abc</ida></doc>
        <doc><idrefa>abc</idrefa></doc>
        <doc><idrefa>abc</idrefa><idref>abc</idref></doc>
        <doc><id>1</id><idrefa>abc</idrefa><idref>abc</idref><idrefa>foo</idrefa><idref>abc</idref></doc>
        <doc><id>abc</id><idref>abc</idref><ida>abc</ida><idrefa>abc</idrefa></doc>
        <doc><idref>abc</idref><id>abc</id><idrefa>abc</idrefa><ida>abc</ida></doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 0 0 0 1 1}

test schema-14.30 {text: boolean (xsd)} {
    tdom::schema s
    s defelement doc {
        text boolean
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>5</doc>
        <doc>00</doc>
        <doc>01</doc>
        <doc>1</doc>
        <doc>11</doc>
        <doc>false</doc>
        {<doc>false </doc>}
        <doc>False</doc>
        <doc>FALSE</doc>
        <doc>true</doc>
        {<doc> true</doc>}
        <doc>TrUe</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 0 1 0 1 0 0 0 1 0 0}

test schema-14.30a {text: boolean (xsd)} {
    tdom::schema s
    s defelement doc {
        text {boolean xsd}
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>5</doc>
        <doc>00</doc>
        <doc>01</doc>
        <doc>1</doc>
        <doc>11</doc>
        <doc>false</doc>
        {<doc>false </doc>}
        <doc>False</doc>
        <doc>FALSE</doc>
        <doc>true</doc>
        {<doc> true</doc>}
        <doc>TrUe</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 0 0 1 0 1 0 0 0 1 0 0}

test schema-14.31 {text: boolean (tcl)} {
    tdom::schema s
    s defelement doc {
        text {boolean tcl}
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc></doc>
        <doc>5</doc>
        <doc>0</doc>
        <doc>01</doc>
        <doc>1</doc>
        <doc>11</doc>
        <doc>false</doc>
        <doc>f</doc>
        <doc>no</doc>
        {<doc>no </doc>}
        <doc>n</doc>
        {<doc> n </doc>}
        {<doc>false </doc>}
        <doc>False</doc>
        <doc>FALSE</doc>
        <doc>true</doc>
        {<doc> true</doc>}
        <doc>TrUe</doc>
        <doc>ON</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 0 0 1 0 1 0 1 1 1 0 1 0 0 1 1 1 0 1 1}

test schema-15.1 {constraint cmd tcl} {
    tdom::schema s
    s define {
        defelement a {
            tcl append ::schema-15.1
            element b
            tcl append ::schema-15.1
        }
    }
    set ::schema-15.1 ""
    set result [s validate {<a><b/></a>} msg]
    s delete
    lappend result $msg ${::schema-15.1}
    set result
} {1 {} ss}

proc schema-15.2-astart {args} {
    append ::schema-15.2 astart
}

proc schema-15.2-aend {args} {
    append ::schema-15.2 aend
}

test schema-15.2 {constraint cmd tcl} {
    tdom::schema s
    s define {
        defelement doc {
            element a *
        }
        defelement a {
            tcl schema-15.2-astart
            element b ! text
            element c ! text
            tcl schema-15.2-aend
        }
    }
    set schema-15.2 ""
    set result [s validate {<doc><a><b>foo</b><c/></a><a><b></b><c>bar</c></a></doc>} msg]
    s delete
    lappend result $msg ${schema-15.2}
    set result
} {1 {} astartaendastartaend}

proc schema-15.3 {type cmd} {
    lappend ::schema-15.3 $type [$cmd info stack inside]
}

test schema-15.3 {constraint cmd tcl} {
    tdom::schema s
    s define {
        defelement doc {
            element a *
        }
        defelement a {
            tcl schema-15.3 astart
            element b ! text
            element c ! text
            tcl schema-15.3 aend
        }
    }
    set schema-15.3 ""
    set result [s validate {<doc><a><b>foo</b><c/></a><a><b></b><c>bar</c></a></doc>} msg]
    s delete
    lappend result $msg {*}${schema-15.3}
    set result
} {1 {} astart a aend a astart a aend a}

proc schema-15.4 {text cmd} {
    if {$text ne "in docContent"} {error "unexpected text argument"}
    set ::schema-15.4 [$cmd info stack inside]
}
test schema-15.4 {constraint cmd tcl} {
    tdom::schema s
    s define {
        defelement doc {
            ref docContent
        }
        defpattern docContent {
            element a
            tcl schema-15.4 "in docContent"
            text
            element b
        }
    }
    set schema-15.4 ""
    set result [s validate {<doc><a/>foo<b/></doc>}]
    s delete
    lappend result [set schema-15.4]
    set result
} {1 doc}

test schema-16.1 {interleave} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element a
                element b
                element c
            }
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b/><c/></doc>
        <doc><b/><a/><c/></doc>
        <doc><c/><b/><a/></doc>
        <doc><a/><b/><a/></doc>
        <doc><a/><b/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 0 0}

# It's in fact a missing feature: handling ambiguity.
# test schema-16.2 {interleave} {knownBug} {
#     tdom::schema s
#     s define {
#         defelement doc {
#             interleave {
#                 element a 1 {
#                     attribute type {fixed foo}
#                 }
#                 element a 1 {
#                     attribute type {fixed bar}
#                 }
#                 element a 1 {
#                     attribute type {fixed grill}
#                 }
#             }
#         }
#         foreach e {a b c} {
#             defelement $e {}
#         }
#     }
#     set result [list]
#     foreach xml {
#         <doc/>
#         {<doc><a type="foo"/><a type="bar"/><a type="grill"/></doc>}
#         {<doc><a type="grill"/><a type="bar"/><a type="foo"/></doc>}
#         {<doc><a type="grill"/><a type="foo"/><a type="bar"/></doc>}
#         {<doc><a type="bar"/><a type="foo"/><a type="bar"/></doc>}
#         {<doc><a type="bar"/><a type="foo"/><a/></doc>}
#         <doc>12</doc>
#     } {
#         lappend result [s validate $xml]
#     }
#     s delete
#     set result
# } {0 1 1 1 0 0}

test schema-16.3 {interleave} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element a
                element b +
                element c
            }
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b/><c/></doc>
        <doc><b/><a/><c/></doc>
        <doc><c/><b/><a/></doc>
        <doc><b/><a/><b/><c/><b/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 1 0 0}

test schema-16.4 {interleave} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element a
                element b ?
                element c
            }
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b/><c/></doc>
        <doc><b/><a/><c/></doc>
        <doc><c/><b/><a/></doc>
        <doc><b/><a/><b/><c/><b/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 1 0}

test schema-16.5 {interleave} {
    tdom::schema s
    s define {
        defelement doc {
            interleave {
                element a
                element b *
                element c
            }
        }
        foreach e {a b c} {
            defelement $e {}
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b/><c/></doc>
        <doc><b/><a/><c/></doc>
        <doc><c/><b/><a/></doc>
        <doc><b/><a/><b/><c/><b/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 1 1 0}

test schema-16.6 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                group * {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><b2/><c/></doc>
        <doc><b1/><b2/><a/><c/></doc>
        <doc><c/><b1/><b2/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 1 1 0}

test schema-16.7 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                group {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><b2/><c/></doc>
        <doc><b1/><b2/><a/><c/></doc>
        <doc><c/><b1/><b2/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 0 0 0}

test schema-16.8 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                group ? {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><b2/><c/></doc>
        <doc><b1/><b2/><a/><c/></doc>
        <doc><c/><b1/><b2/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 0 1 0}

test schema-16.9 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                group + {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><b2/><c/></doc>
        <doc><b1/><b2/><a/><c/></doc>
        <doc><c/><b1/><b2/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 1 0 0}

test schema-16.10 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                group ? {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><b2/><c/></doc>
        <doc><b1/><b2/><a/><c/></doc>
        <doc><c/><b1/><b2/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 0 1 0}

test schema-16.11 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                choice {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><c/></doc>
        <doc><b2/><a/><c/></doc>
        <doc><c/><b1/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 0 0 0}

test schema-16.12 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                choice ? {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><c/></doc>
        <doc><b2/><a/><c/></doc>
        <doc><c/><b1/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 0 0 1 0}

test schema-16.13 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                choice + {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><c/></doc>
        <doc><b2/><a/><c/></doc>
        <doc><c/><b1/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 1 1 0 0}

test schema-16.14 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                choice * {
                    element b1
                    element b2
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><c/></doc>
        <doc><b2/><a/><c/></doc>
        <doc><c/><b1/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b1/><b2/><a/><b1/><b2/><c/><b1/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 1 1 1 1 1 0}

test schema-16.15 {interleave} {
    tdom::schema s
    s define {
        foreach e {a b1 b11 b2 c} {
            defelement $e {}
        }
        defelement doc {
            interleave {
                element a
                choice * {
                    element b1
                    group {
                        element b11
                        element b2
                    }
                }
                element c
            }
        }
    }
    set result [list]
    foreach xml {
        <doc/>
        <doc><a/><b1/><c/></doc>
        <doc><b2/><a/><c/></doc>
        <doc><c/><b1/><a/></doc>
        <doc><c/><b1/><a/><b2/></doc>
        <doc><b11/><b2/><a/><b11/><b2/><c/><b11/><b2/></doc>
        <doc><a/><c/></doc>
        <doc>12</doc>
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {0 1 0 1 0 1 1 0}

test schema-17.1 {info} {
    tdom::schema s
    s define {
        foreach e {a b1 b11 b2 c} {
            defelement $e {}
        }
    }
    set result [lsort [s info defelements]]
    s delete
    set result
} {a b1 b11 b2 c}

test schema-17.2 {info} {
    tdom::schema s
    s define {
        defelement b {
            element b1
            element b2
        }
        defelement a {
            element a1
            element a2
        }
    }
    set result [lsort [s info defelements]]
    s delete
    set result
} {a b}

test schema-17.3 {info} {
    tdom::schema s
    s define {
        defelement b {
            element b1 1 text
            element a
            element b2
        }
        defelement a {
            element a1
            element a2
        }
    }
    set result [lsort [s info defelements]]
    s delete
    set result
} {a b}

proc schema-18 {args} {
    lappend ::result {*}$args
}
test schema-18.1 {reportcmd} {
    tdom::schema s
    s define {
        defelement doc {
            element e
            text {minLength 1}
            element e
        }
    }
    s reportcmd schema-18
    set result ""
    set rc [s validate {<doc><e/></doc>}]
    lappend result $rc
    s delete
    set result
} {s MISSING_TEXT s MISSING_ELEMENT 1}

test schema-18.1a {reportcmd} {
    tdom::schema s
    s define {
        defelement doc {
            element e
            text {minLength 1}
            element e
        }
    }
    s reportcmd schema-18
    set result ""
    set rc [s validate {<doc><e/><e/></doc>}]
    lappend result $rc
    s delete
    set result
} {s MISSING_TEXT 1}

test schema-18.2 {reportcmd} {
    tdom::schema s
    s define {
        defelement doc {
            element a
            element b
            element c
        }
    }
    s reportcmd schema-18
    set result ""
    set rc [s validate {<doc><a/><c/></doc>}]
    lappend result $rc
    s delete
    set result
} {s MISSING_CP 1}

test schema-18.3 {reportcmd} {
    tdom::schema s
    s define {
        defelement doc {
            element a
        }
    }
    s reportcmd schema-18
    set result ""
    foreach xml {
        <foo/>
        <bar>baz</bar>
        <bar>baz<a/>grill</bar>
        <bar><a><b/></a></bar>
    } {
        set rc [s validate $xml]
        lappend result $rc
    }
    s delete
    set result
} {s UNKNOWN_ROOT_ELEMENT 1 s UNKNOWN_ROOT_ELEMENT 1 s UNKNOWN_ROOT_ELEMENT 1 s UNKNOWN_ROOT_ELEMENT 1}

test schema-18.4 {reportcmd} {
    tdom::schema s
    s define {
        defelement doc {
            element items * {
                element item * {
                    attribute ref {integer}
                }
            }
        }
    }
    s reportcmd schema-18
    set result [list]
    foreach xml {
        {<doc><items><item ref="1"/><item ref="1"/></items><items><item ref="1"/><item ref="1"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="a"/></items><items><item ref="b"/><item ref="1"/></items></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 s WRONG_ATTRIBUTE_VALUE s WRONG_ATTRIBUTE_VALUE 1}

test schema-18.5 {reportcmd} {
    tdom::schema s
    s define {
        defelement doc {
            element items * {
                element item * {
                    text {minLength 2}
                }
            }
        }
    }
    s reportcmd schema-18
    set result [list]
    foreach xml {
        {<doc><items><item>1</item></items></doc>}
        {<doc><items><item>1</item><item/></items></doc>}
        {<doc><items><item>>12</item><item>ab</item></items></doc>}

    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {s WRONG_VALUE 1 s WRONG_VALUE s MISSING_TEXT 1 1}

proc validatedSAX {g xml {keepEmpties 1}} {
    set args [list -validateCmd $g]
    if {!$keepEmpties} {
        lappend args -ignorewhitespace 1
    }
    xml::parser p {*}$args
    set rc [catch {p parse $xml} errMsg]
    p delete
    return $rc
}

proc validatedDOM {g xml {keepEmpties 0}} {
    set args [list -validateCmd $g]
    if {$keepEmpties} {
        lappend args -keepEmpties
    }
    set rc [catch {
        set doc [dom parse {*}$args $xml]
    } errMsg]
    if {$doc ne ""} {
        $doc delete
    }
    return $rc
}

proc postValidation {g xml} {
    set doc [dom parse $xml]
    set rc [$g domvalidate $doc errMsg]
    #puts "error: $errMsg"
    $doc delete
    return $rc
}

test schema-19.1 {keyspace} {
    tdom::schema s
    s define {
        defelement doc {
            element items * {
                keyspace ref {
                    element item * {
                        attribute ref ? {
                            key ref
                        }
                    }
                }
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><items><item ref="1"/><item ref="foo"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="1"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="1"/><item ref="foo"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="1"/><item ref="bar"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="2"/><item ref="bar"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="bar"/><item ref="bar"/></items></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 0 1 1 1 0}

test schema-19.2 {keyspace} {
    tdom::schema s
    s define {
        defelement doc {
            element items * {
                keyspace ref {
                    element item * {
                        attribute ref ? {
                            key ref
                        }
                    }
                }
            }
        }
    }
    s reportcmd schema-18
    set result [list]
    foreach xml {
        {<doc><items><item ref="1"/><item ref="1"/></items><items><item ref="1"/><item ref="1"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="a"/></items><items><item ref="c"/><item ref="d"/></items></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {s WRONG_ATTRIBUTE_VALUE s WRONG_ATTRIBUTE_VALUE 1 1}

test schema-19.3 {keyspace} {
    tdom::schema s
    s define {
        defelement doc {
            element items *
        }
        defelement items {
            keyspace my {
                element item *
            }
        }
        defelement item {
            attribute id ? {
                key my
            }
            attribute ref ? {
                keyref my
            }
        }
    }
    s reportcmd schema-18
    set result [list]
    foreach xml {
        {<doc><items><item ref="1"/><item id="1"/></items></doc>}
        {<doc><items><item ref="1" id="1"/></items></doc>}
        {<doc><items><item ref="a" id="1"/></items></doc>}
        {<doc><items><item ref="1"/><item id="1"/></items><items><item ref="1"/><item ref="1"/></items></doc>}
    } {
        lappend result [s validate $xml]
    }
    s delete
    set result
} {1 1 s UNKNOWN_KEYREF 1 s UNKNOWN_KEYREF 1}

test schema-20.1 {domunique} {
    set schema {
        prefixns {ns1 http://tdom.org/test}
        defelement doc {
            domunique ${::schema-20.1} @ref
        }
    }
    set result [list]
    foreach ::schema-20.1 {
        a
        ./../a
        /foo
        a/b
        {a | b}
        a|b
        (a|b)
        {a/b/c | b/c/d | c/d/e}
        .//a
        //a
        a/@ref
        a/b/c
        {a//b[1]/c}
        (.//b|a)/c
        ns1:a
        a/.//b/c
        {}
        {    }
        "
                "
    } {
        tdom::schema s
        lappend result [catch {s define $schema} errMsg]
        #puts $errMsg
        s delete
    }
    set result
} {0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1}

test schema-20.2 {domunique} {
    tdom::schema s
    s define {
        defelement doc {
            domunique item @ref
            element item * {
                attribute ref ?
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><item ref="1"/><item ref="foo"/></doc>}
        {<doc><item ref="1"/><item ref="1"/></doc>}
        {<doc><item/><item ref="1"/></doc>}
        {<doc><item/><item/></doc>}
    } {
        lappend result [postValidation s $xml]
    }
    s delete
    set result
} {1 0 1 0}

test schema-20.2a {domunique} {
    tdom::schema s
    s define {
        defelement doc {
            domunique item @ref itemrefkey IGNORE_EMPTY_FIELD_SET
            element item * {
                attribute ref ?
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><item ref="1"/><item ref="foo"/></doc>}
        {<doc><item ref="1"/><item ref="1"/></doc>}
        {<doc><item/><item ref="1"/></doc>}
        {<doc><item/><item/></doc>}
    } {
        lappend result [postValidation s $xml]
    }
    s delete
    set result
} {1 0 1 1}

test schema-20.3 {domunique} {
    tdom::schema s
    s define {
        defelement doc {
            element items * {
                element item * {
                    attribute ref ?
                }
                domunique item @ref
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><items><item ref="1"/><item ref="foo"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="1"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="1"/><item ref="foo"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="1"/><item ref="bar"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="2"/><item ref="bar"/></items></doc>}
        {<doc><items><item ref="1"/><item ref="foo"/></items><items><item ref="bar"/><item ref="bar"/></items></doc>}
    } {
        lappend result [postValidation s $xml]
    }
    s delete
    set result
} {1 0 1 1 1 0}

test schema-20.4 {domunique} {
    tdom::schema s
    s define {
        defelement doc {
            domunique item {@ref @id}
            element item * {
                attribute ref ?
                attribute id ?
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><item ref="1"/><item ref="foo"/></doc>}
        {<doc><item ref="1"/><item ref="1"/></doc>}
        {<doc><item ref="1" id="a"/><item ref="foo" id="a"/></doc>}
        {<doc><item ref="1" id="a"/><item ref="1" id="a"/></doc>}
        {<doc><item ref="1" id="a"/><item ref="1" id="b"/></doc>}
    } {
        lappend result [postValidation s $xml]
    }
    s delete
    set result
} {1 0 1 0 1}

test schema-20.5 {domunique} {
    tdom::schema s
    s define {
        defelement doc {
            domunique item ref
            element item * {
                element ref ! text
            }
        }
    }
    set result [list]
    foreach xml {
        {<doc><item><ref>1</ref></item><item><ref>foo</ref></item></doc>}
        {<doc><item><ref>1</ref></item><item><ref>1</ref></item></doc>}
    } {
        lappend result [postValidation s $xml]
    }
    s delete
    set result
} {1 0}


}
